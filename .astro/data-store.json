[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.10","content-config-digest","63d7f300aa653daf","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","post",["Map",11,12,30,31,48,49,65,66,136,137,163,164,180,181,206,207,225,226,249,250,280,281,322,323,340,341,357,358,374,375,391,392,434,435,476,477,503,504,523,524,541,542,558,559],"astro-aria",{"id":11,"data":13,"body":17,"filePath":18,"digest":19,"rendered":20,"legacyId":29},{"title":14,"description":15,"dateFormatted":16},"Aria - a minimalist Astro homepage template","Aria is a template for Astro","Jun 6, 2024","[![GitHub](https://github.html.zone/ccbikai/astro-aria)](https://github.com/ccbikai/astro-aria)\n\nAria is a template I found on [https://aria.devdojo.io/](https://aria.devdojo.io/). It's clean and beautiful, so I decided to use it for my own homepage and ported it to Astro.\n\nIt's already open source, so feel free to use it if you're interested.\n\n\u003Chttps://github.com/ccbikai/astro-aria>","src/content/post/astro-aria.md","920c56a03092782a",{"html":21,"metadata":22},"\u003Cp>\u003Ca href=\"https://github.com/ccbikai/astro-aria\">\u003Cimg src=\"https://github.html.zone/ccbikai/astro-aria\" alt=\"GitHub\">\u003C/a>\u003C/p>\n\u003Cp>Aria is a template I found on \u003Ca href=\"https://aria.devdojo.io/\">https://aria.devdojo.io/\u003C/a>. It’s clean and beautiful, so I decided to use it for my own homepage and ported it to Astro.\u003C/p>\n\u003Cp>It’s already open source, so feel free to use it if you’re interested.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/astro-aria\">https://github.com/ccbikai/astro-aria\u003C/a>\u003C/p>",{"headings":23,"localImagePaths":24,"remoteImagePaths":25,"frontmatter":26,"imagePaths":28},[],[],[],{"layout":27,"title":14,"description":15,"dateFormatted":16},"../../layouts/post.astro",[],"astro-aria.md","broadcast-channel",{"id":30,"data":32,"body":36,"filePath":37,"digest":38,"rendered":39,"legacyId":47},{"title":33,"description":34,"dateFormatted":35},"BroadcastChannel - Turn your Telegram Channel into a MicroBlog","Turn your Telegram Channel into a MicroBlog","Aug 11, 2024","I have been sharing some interesting tools on [X](https://x.com/0xKaibi) and also synchronizing them to my Telegram Channel. I saw that [Austin mentioned he is preparing to create a website](https://x.com/austinit/status/1817832660758081651) to compile all the shared content. This reminded me of a template I recently came across called [Sepia](https://github.com/Planetable/SiteTemplateSepia), and I thought about converting the Telegram Channel into a microblog.\n\nThe difficulty wasn't high; I completed the main functionality over a weekend. During the process, I achieved a browser-side implementation with zero JavaScript and would like to share some interesting technical points:\n\n1. The anti-spoiler mode and the hidden display of the mobile search box were implemented using the CSS \":checked pseudo-class\" and the \"+ adjacent sibling combinator.\" [Reference](https://www.tpisoftware.com/tpu/articleDetails/2744)\n\n2. The transition animations utilized CSS View Transitions. [Reference](https://liruifengv.com/posts/zero-js-view-transitions/)\n\n3. The image lightbox used the HTML popover attribute. [Reference](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/popover)\n\n4. The display and hiding of the \"back to top\" feature were implemented using CSS animation-timeline, exclusive to Chrome version 115 and above. [Reference](https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-timeline/view)\n\n5. The multi-image masonry layout was achieved using grid layout. [Reference](https://www.smashingmagazine.com/native-css-masonry-layout-css-grid/)\n\n6. The visit statistics were tracked using a 1px transparent image as the logo background, an ancient technique that is now rarely supported by visit statistics software.\n\n7. JavaScript execution on the browser side was prohibited using the Content-Security-Policy's script-src 'none'. [Reference](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/script-src)\n\nAfter completing the project, I open-sourced it, and I was pleasantly surprised by the number of people who liked it; I received over 800 stars in just a week.\n\nIf you're interested, you can check it out on GitHub.\n\n\u003Chttps://github.com/ccbikai/BroadcastChannel>\n\n[![BroadcastChannel repository on GitHub](https://github.html.zone/ccbikai/BroadcastChannel)](https://github.com/ccbikai/BroadcastChannel)","src/content/post/broadcast-channel.md","24266d6941065486",{"html":40,"metadata":41},"\u003Cp>I have been sharing some interesting tools on \u003Ca href=\"https://x.com/0xKaibi\">X\u003C/a> and also synchronizing them to my Telegram Channel. I saw that \u003Ca href=\"https://x.com/austinit/status/1817832660758081651\">Austin mentioned he is preparing to create a website\u003C/a> to compile all the shared content. This reminded me of a template I recently came across called \u003Ca href=\"https://github.com/Planetable/SiteTemplateSepia\">Sepia\u003C/a>, and I thought about converting the Telegram Channel into a microblog.\u003C/p>\n\u003Cp>The difficulty wasn’t high; I completed the main functionality over a weekend. During the process, I achieved a browser-side implementation with zero JavaScript and would like to share some interesting technical points:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>The anti-spoiler mode and the hidden display of the mobile search box were implemented using the CSS “:checked pseudo-class” and the ”+ adjacent sibling combinator.” \u003Ca href=\"https://www.tpisoftware.com/tpu/articleDetails/2744\">Reference\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The transition animations utilized CSS View Transitions. \u003Ca href=\"https://liruifengv.com/posts/zero-js-view-transitions/\">Reference\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The image lightbox used the HTML popover attribute. \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/popover\">Reference\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The display and hiding of the “back to top” feature were implemented using CSS animation-timeline, exclusive to Chrome version 115 and above. \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-timeline/view\">Reference\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The multi-image masonry layout was achieved using grid layout. \u003Ca href=\"https://www.smashingmagazine.com/native-css-masonry-layout-css-grid/\">Reference\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The visit statistics were tracked using a 1px transparent image as the logo background, an ancient technique that is now rarely supported by visit statistics software.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>JavaScript execution on the browser side was prohibited using the Content-Security-Policy’s script-src ‘none’. \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\">Reference\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>After completing the project, I open-sourced it, and I was pleasantly surprised by the number of people who liked it; I received over 800 stars in just a week.\u003C/p>\n\u003Cp>If you’re interested, you can check it out on GitHub.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/BroadcastChannel\">https://github.com/ccbikai/BroadcastChannel\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/BroadcastChannel\">\u003Cimg src=\"https://github.html.zone/ccbikai/BroadcastChannel\" alt=\"BroadcastChannel repository on GitHub\">\u003C/a>\u003C/p>",{"headings":42,"localImagePaths":43,"remoteImagePaths":44,"frontmatter":45,"imagePaths":46},[],[],[],{"layout":27,"title":33,"description":34,"dateFormatted":35},[],"broadcast-channel.md","ai-remove-image-background",{"id":48,"data":50,"body":53,"filePath":54,"digest":55,"rendered":56,"legacyId":64},{"title":51,"description":51,"dateFormatted":52},"Browser locally uses AI to remove image backgrounds","Jul 14, 2024","Yo, so I've been digging into this whole AI thing for front-end development lately, and stumbled upon this cool Transformers.js example.  Turned it into a sweet little tool, check it out!\n\nBasically, it uses Transformers.js in a WebWorker to tap into WebGPU and run this RMBG-1.4 model.  Long story short, you can now use AI to nuke image backgrounds right in your browser. And get this, it only takes half a second to process a 4K image on my M1 PRO!\n\nHere's the link to the tool: [https://html.zone/background-remover](https://html.zone/background-remover)\n\n[![AI background remover](https://og-image.html.zone/https://html.zone/background-remover)](https://html.zone/background-remover)\n\n* * *\n\nWanna build it yourself?  Head over to [https://github.com/xenova/transformers.js/tree/main/examples/remove-background-client](https://github.com/xenova/transformers.js/tree/main/examples/remove-background-client) for the source code.  Oh, and heads up, you gotta be on Transformers.js V3 to mess with WebGPU.","src/content/post/ai-remove-image-background.md","d1f4097e2faf54fa",{"html":57,"metadata":58},"\u003Cp>Yo, so I’ve been digging into this whole AI thing for front-end development lately, and stumbled upon this cool Transformers.js example.  Turned it into a sweet little tool, check it out!\u003C/p>\n\u003Cp>Basically, it uses Transformers.js in a WebWorker to tap into WebGPU and run this RMBG-1.4 model.  Long story short, you can now use AI to nuke image backgrounds right in your browser. And get this, it only takes half a second to process a 4K image on my M1 PRO!\u003C/p>\n\u003Cp>Here’s the link to the tool: \u003Ca href=\"https://html.zone/background-remover\">https://html.zone/background-remover\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://html.zone/background-remover\">\u003Cimg src=\"https://og-image.html.zone/https://html.zone/background-remover\" alt=\"AI background remover\">\u003C/a>\u003C/p>\n\u003Chr>\n\u003Cp>Wanna build it yourself?  Head over to \u003Ca href=\"https://github.com/xenova/transformers.js/tree/main/examples/remove-background-client\">https://github.com/xenova/transformers.js/tree/main/examples/remove-background-client\u003C/a> for the source code.  Oh, and heads up, you gotta be on Transformers.js V3 to mess with WebGPU.\u003C/p>",{"headings":59,"localImagePaths":60,"remoteImagePaths":61,"frontmatter":62,"imagePaths":63},[],[],[],{"layout":27,"title":51,"description":51,"dateFormatted":52},[],"ai-remove-image-background.md","cloudflare-worker-image",{"id":65,"data":67,"body":70,"filePath":71,"digest":72,"rendered":73,"legacyId":135},{"title":68,"description":68,"dateFormatted":69},"Processing Images with Cloudflare Worker","Nov 18, 2023","## Background\n\nPreviously, I set up a 10GB storage, unlimited bandwidth cloud storage using [Backblaze B2](https://www.backblaze.com/cloud-storage) and Cloudflare, which I use for daily file sharing and as an image hosting service for my blog. It works well with uPic. However, when using it as an image hosting service for my blog, I found that it doesn't support image resizing/cropping. I often use Alibaba Cloud OSS for image processing at work, and I couldn't stand the limitation, so I decided to create my own service.\n\n> The free version of Workers only has a CPU limit of 10ms, and it frequently exceeds the resource usage limit, resulting in a high rate of image cracking. Now it has been adapted to Vercel Edge, which can be used with a CDN. See [https://chi.miantiao.me/post/cloudflare-worker-image/](https://chi.miantiao.me/post/cloudflare-worker-image/)\n\n## Process\n\nAfter some research, I considered two options:\n\n1. Use Cloudflare to proxy [Vercel Image](https://vercel.com/docs/image-optimization). With this option, the traffic goes through Cloudflare -> Vercel -> Cloudflare -> Backblaze, which is not ideal in terms of stability and speed. Additionally, it only allows 1000 image processing requests per month, which is quite limited.\n\n2. Use the public service [wsrv.nl](https://images.weserv.nl/). With this option, the traffic goes through Cloudflare -> wsrv.nl -> Cloudflare -> Backblaze, and the domain is not under my control. If I want to control the domain, I would have to go through Cloudflare Worker again, which adds complexity.\n\nSince neither option was ideal, I kept looking for alternatives. Last week, when I was working on an Email Worker, I discovered that Cloudflare Worker supports [WebAssembly (Wasm)](https://developers.cloudflare.com/workers/runtime-apis/webassembly/), which sparked the idea of using Worker + WebAssembly to process images.\n\nInitially, I wanted to use [sharp](https://sharp.pixelplumbing.com/), which I had used when working with Node.js. However, the author mentioned that Cloudflare Worker does not support multithreading, so sharp cannot run on Cloudflare Worker in the short term.\n\nI searched online and found that a popular Rust library for image processing is [Photon](https://silvia-odwyer.github.io/photon/), and there is also a [demo](https://github.com/techwithdeo/cloudflare-workers/tree/main/photon-library) in the community. I tried it out and confirmed that it can run on Cloudflare Worker. However, the demo has two drawbacks:\n\n1. Photon needs to be manually updated and cannot keep up with the official updates as quickly.\n2. It can only output images in PNG format, and the file size of JPG images actually becomes larger after resizing.\n\n## Result\n\nBased on the keywords \"Photon + Worker\", I did further research and came up with a new solution inspired by [DenoFlare](https://denoflare.dev/examples/transform-images-wasm) and [jSquash](https://github.com/jamsinclair/jSquash). In the end, I used the official Photon (with patch-package as a dependency), Squash WebAssembly, and Cloudflare Worker to create an image processing service for resizing images. _I originally wanted to support output in AVIF and JPEG XL formats, but due to the 1MB size limit of the free version of Workers, I had to give up this feature_.\n\nSupported features:\n\n1. Supports processing of PNG, JPG, BMP, ICO, and TIFF format images.\n2. Can output images in JPG, PNG, and WEBP formats, with WEBP being the default.\n3. Supports pipelining, allowing multiple operations to be executed.\n4. Supports Cloudflare caching.\n5. Supports whitelisting of image URLs to prevent abuse.\n6. Degrades gracefully in case of exceptions, returning the original image (exceptions are not cached).\n\n## Demo\n\n### Format Conversion\n\n#### webp\n\n![webp](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&format=webp)\n\n#### jpg\n\n![jpg](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&format=jpg)\n\n#### png\n\n![png](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&format=png)\n\n### Resizing\n\n![resize](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=resize!830,400,2)\n\n### Rotation\n\n![rotate](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=rotate!90)\n\n### Cropping\n\n![rotate](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=crop!0,0,1000,1000)\n\n### Filters\n\n![filter](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=filter%21obsidian)\n\n### Image Watermark\n\n![watermark](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=watermark!https%3A%2F%2Fstatic.miantiao.me%2Fshare%2F6qIq4w%2FFhSUzU.png,20,20)\n\n### Text Watermark\n\n![draw_text](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=draw_text!miantiao.me,20,20)\n\n### Pipeline Operations\n\n#### Resize + Rotate + Text Watermark\n\n![resize & rotate & draw_text](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=resize!830,400,2%7Crotate!180%7Cdraw_text!miantiao.me,10,10)\n\n#### Resize + Image Watermark\n\n![resize & watermark](https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=resize!830,400,2%7Cwatermark!https%3A%2F%2Fstatic.miantiao.me%2Fshare%2F6qIq4w%2FFhSUzU.png,10,10)\n\nIn theory, it supports all the operations of Photon. If you are interested, you can check the image URLs and modify the parameters according to the [Photon documentation](https://docs.rs/photon-rs/latest/photon_rs/) to try it out yourself. If you encounter any issues, feel free to leave a comment and provide feedback.\n\n## Sharing\n\nI have open-sourced this solution on my GitHub. If you need it, you can follow the documentation to deploy it.\n\n[![ccbikai/cloudflare-worker-image - GitHub](https://github.html.zone/ccbikai/cloudflare-worker-image)](https://github.com/ccbikai/cloudflare-worker-image)\n\n* * *\n\n[![Buy Me A Coffee](https://static.miantiao.me/share/0WmsVP/CcmGr8.png)](https://www.buymeacoffee.com/miantiao)","src/content/post/cloudflare-worker-image.md","b3f99b3f7d85d111",{"html":74,"metadata":75},"\u003Ch2 id=\"background\">Background\u003C/h2>\n\u003Cp>Previously, I set up a 10GB storage, unlimited bandwidth cloud storage using \u003Ca href=\"https://www.backblaze.com/cloud-storage\">Backblaze B2\u003C/a> and Cloudflare, which I use for daily file sharing and as an image hosting service for my blog. It works well with uPic. However, when using it as an image hosting service for my blog, I found that it doesn’t support image resizing/cropping. I often use Alibaba Cloud OSS for image processing at work, and I couldn’t stand the limitation, so I decided to create my own service.\u003C/p>\n\u003Cblockquote>\n\u003Cp>The free version of Workers only has a CPU limit of 10ms, and it frequently exceeds the resource usage limit, resulting in a high rate of image cracking. Now it has been adapted to Vercel Edge, which can be used with a CDN. See \u003Ca href=\"https://chi.miantiao.me/post/cloudflare-worker-image/\">https://chi.miantiao.me/post/cloudflare-worker-image/\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"process\">Process\u003C/h2>\n\u003Cp>After some research, I considered two options:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>Use Cloudflare to proxy \u003Ca href=\"https://vercel.com/docs/image-optimization\">Vercel Image\u003C/a>. With this option, the traffic goes through Cloudflare -> Vercel -> Cloudflare -> Backblaze, which is not ideal in terms of stability and speed. Additionally, it only allows 1000 image processing requests per month, which is quite limited.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Use the public service \u003Ca href=\"https://images.weserv.nl/\">wsrv.nl\u003C/a>. With this option, the traffic goes through Cloudflare -> wsrv.nl -> Cloudflare -> Backblaze, and the domain is not under my control. If I want to control the domain, I would have to go through Cloudflare Worker again, which adds complexity.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Since neither option was ideal, I kept looking for alternatives. Last week, when I was working on an Email Worker, I discovered that Cloudflare Worker supports \u003Ca href=\"https://developers.cloudflare.com/workers/runtime-apis/webassembly/\">WebAssembly (Wasm)\u003C/a>, which sparked the idea of using Worker + WebAssembly to process images.\u003C/p>\n\u003Cp>Initially, I wanted to use \u003Ca href=\"https://sharp.pixelplumbing.com/\">sharp\u003C/a>, which I had used when working with Node.js. However, the author mentioned that Cloudflare Worker does not support multithreading, so sharp cannot run on Cloudflare Worker in the short term.\u003C/p>\n\u003Cp>I searched online and found that a popular Rust library for image processing is \u003Ca href=\"https://silvia-odwyer.github.io/photon/\">Photon\u003C/a>, and there is also a \u003Ca href=\"https://github.com/techwithdeo/cloudflare-workers/tree/main/photon-library\">demo\u003C/a> in the community. I tried it out and confirmed that it can run on Cloudflare Worker. However, the demo has two drawbacks:\u003C/p>\n\u003Col>\n\u003Cli>Photon needs to be manually updated and cannot keep up with the official updates as quickly.\u003C/li>\n\u003Cli>It can only output images in PNG format, and the file size of JPG images actually becomes larger after resizing.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"result\">Result\u003C/h2>\n\u003Cp>Based on the keywords “Photon + Worker”, I did further research and came up with a new solution inspired by \u003Ca href=\"https://denoflare.dev/examples/transform-images-wasm\">DenoFlare\u003C/a> and \u003Ca href=\"https://github.com/jamsinclair/jSquash\">jSquash\u003C/a>. In the end, I used the official Photon (with patch-package as a dependency), Squash WebAssembly, and Cloudflare Worker to create an image processing service for resizing images. \u003Cem>I originally wanted to support output in AVIF and JPEG XL formats, but due to the 1MB size limit of the free version of Workers, I had to give up this feature\u003C/em>.\u003C/p>\n\u003Cp>Supported features:\u003C/p>\n\u003Col>\n\u003Cli>Supports processing of PNG, JPG, BMP, ICO, and TIFF format images.\u003C/li>\n\u003Cli>Can output images in JPG, PNG, and WEBP formats, with WEBP being the default.\u003C/li>\n\u003Cli>Supports pipelining, allowing multiple operations to be executed.\u003C/li>\n\u003Cli>Supports Cloudflare caching.\u003C/li>\n\u003Cli>Supports whitelisting of image URLs to prevent abuse.\u003C/li>\n\u003Cli>Degrades gracefully in case of exceptions, returning the original image (exceptions are not cached).\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"demo\">Demo\u003C/h2>\n\u003Ch3 id=\"format-conversion\">Format Conversion\u003C/h3>\n\u003Ch4 id=\"webp\">webp\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;format=webp\" alt=\"webp\">\u003C/p>\n\u003Ch4 id=\"jpg\">jpg\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;format=jpg\" alt=\"jpg\">\u003C/p>\n\u003Ch4 id=\"png\">png\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;format=png\" alt=\"png\">\u003C/p>\n\u003Ch3 id=\"resizing\">Resizing\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=resize!830,400,2\" alt=\"resize\">\u003C/p>\n\u003Ch3 id=\"rotation\">Rotation\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=rotate!90\" alt=\"rotate\">\u003C/p>\n\u003Ch3 id=\"cropping\">Cropping\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=crop!0,0,1000,1000\" alt=\"rotate\">\u003C/p>\n\u003Ch3 id=\"filters\">Filters\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=filter%21obsidian\" alt=\"filter\">\u003C/p>\n\u003Ch3 id=\"image-watermark\">Image Watermark\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=watermark!https%3A%2F%2Fstatic.miantiao.me%2Fshare%2F6qIq4w%2FFhSUzU.png,20,20\" alt=\"watermark\">\u003C/p>\n\u003Ch3 id=\"text-watermark\">Text Watermark\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=draw_text!miantiao.me,20,20\" alt=\"draw_text\">\u003C/p>\n\u003Ch3 id=\"pipeline-operations\">Pipeline Operations\u003C/h3>\n\u003Ch4 id=\"resize--rotate--text-watermark\">Resize + Rotate + Text Watermark\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=resize!830,400,2%7Crotate!180%7Cdraw_text!miantiao.me,10,10\" alt=\"resize &#x26; rotate &#x26; draw_text\">\u003C/p>\n\u003Ch4 id=\"resize--image-watermark\">Resize + Image Watermark\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=resize!830,400,2%7Cwatermark!https%3A%2F%2Fstatic.miantiao.me%2Fshare%2F6qIq4w%2FFhSUzU.png,10,10\" alt=\"resize &#x26; watermark\">\u003C/p>\n\u003Cp>In theory, it supports all the operations of Photon. If you are interested, you can check the image URLs and modify the parameters according to the \u003Ca href=\"https://docs.rs/photon-rs/latest/photon_rs/\">Photon documentation\u003C/a> to try it out yourself. If you encounter any issues, feel free to leave a comment and provide feedback.\u003C/p>\n\u003Ch2 id=\"sharing\">Sharing\u003C/h2>\n\u003Cp>I have open-sourced this solution on my GitHub. If you need it, you can follow the documentation to deploy it.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/cloudflare-worker-image\">\u003Cimg src=\"https://github.html.zone/ccbikai/cloudflare-worker-image\" alt=\"ccbikai/cloudflare-worker-image - GitHub\">\u003C/a>\u003C/p>\n\u003Chr>\n\u003Cp>\u003Ca href=\"https://www.buymeacoffee.com/miantiao\">\u003Cimg src=\"https://static.miantiao.me/share/0WmsVP/CcmGr8.png\" alt=\"Buy Me A Coffee\">\u003C/a>\u003C/p>",{"headings":76,"localImagePaths":131,"remoteImagePaths":132,"frontmatter":133,"imagePaths":134},[77,81,84,87,90,94,97,99,101,104,107,110,113,116,119,122,125,128],{"depth":78,"slug":79,"text":80},2,"background","Background",{"depth":78,"slug":82,"text":83},"process","Process",{"depth":78,"slug":85,"text":86},"result","Result",{"depth":78,"slug":88,"text":89},"demo","Demo",{"depth":91,"slug":92,"text":93},3,"format-conversion","Format Conversion",{"depth":95,"slug":96,"text":96},4,"webp",{"depth":95,"slug":98,"text":98},"jpg",{"depth":95,"slug":100,"text":100},"png",{"depth":91,"slug":102,"text":103},"resizing","Resizing",{"depth":91,"slug":105,"text":106},"rotation","Rotation",{"depth":91,"slug":108,"text":109},"cropping","Cropping",{"depth":91,"slug":111,"text":112},"filters","Filters",{"depth":91,"slug":114,"text":115},"image-watermark","Image Watermark",{"depth":91,"slug":117,"text":118},"text-watermark","Text Watermark",{"depth":91,"slug":120,"text":121},"pipeline-operations","Pipeline Operations",{"depth":95,"slug":123,"text":124},"resize--rotate--text-watermark","Resize + Rotate + Text Watermark",{"depth":95,"slug":126,"text":127},"resize--image-watermark","Resize + Image Watermark",{"depth":78,"slug":129,"text":130},"sharing","Sharing",[],[],{"layout":27,"title":68,"description":68,"dateFormatted":69},[],"cloudflare-worker-image.md","cloudflare-pypi-mirror",{"id":136,"data":138,"body":142,"filePath":143,"digest":144,"rendered":145,"legacyId":162},{"title":139,"description":140,"dateFormatted":141},"Cloudflare's New PyPI Mirror Service","Cloudflare PyPI Mirror supports PEP 691 and CORS, enabling PyPI access in mainland China for Micropip with open-source code available","Dec 21, 2024","[Pyodide](https://micropip.pyodide.org/en/stable/index.html) is a library that runs Python in WebAssembly, using [Micropip](https://micropip.pyodide.org/en/stable/index.html) to install packages from PyPI. Due to WebAssembly's requirements for CORS and PEP 691 when running in browsers, and the fact that Tsinghua's TUNA mirror doesn't support CORS, this creates some challenges.\n\nPyPI is not directly accessible in mainland China, but there are many mirrors available. Institutions like Tsinghua University, Alibaba Cloud, Tencent Cloud, and Huawei Cloud provide mirror services. However, except for Tsinghua's TUNA mirror, none of them support the JSON-based Simple API for Python ([PEP 691](https://peps.python.org/pep-0691/)).\n\nSince WebAssembly requires both CORS support and PEP 691 compliance when running in browsers, and Tsinghua's TUNA mirror doesn't support CORS, there might not be any suitable PyPI mirrors available in mainland China for Micropip.\n\nGiven this situation, I've set up a Cloudflare-based mirror that supports both PEP 691 and CORS.\n\nYou can build this using either Workers or Snippets, each with their own advantages and disadvantages:\n\n### [Workers](https://workers.cloudflare.com/)\n\nPros: Available with the free plan.\n\nCons: Generates many Worker requests, which might exceed free plan limits and require payment or become unusable.\n\n### [Snippets](https://developers.cloudflare.com/rules/snippets/)\n\nPros: Doesn't generate Worker requests, supports high usage volumes. Cons: Currently only available for Pro plans and above, not available on Free tier.\n\n## Code\n\nThe corresponding code has been open-sourced and is available at:\n\n[https://github.com/ccbikai/cloudflare-pypi-mirror](https://github.com/ccbikai/cloudflare-pypi-mirror)\n\n[![Cloudflare PyPI Mirror](https://github.html.zone/ccbikai/cloudflare-pypi-mirror)](https://github.com/ccbikai/cloudflare-pypi-mirror)","src/content/post/cloudflare-pypi-mirror.md","d3e6880e513b6683",{"html":146,"metadata":147},"\u003Cp>\u003Ca href=\"https://micropip.pyodide.org/en/stable/index.html\">Pyodide\u003C/a> is a library that runs Python in WebAssembly, using \u003Ca href=\"https://micropip.pyodide.org/en/stable/index.html\">Micropip\u003C/a> to install packages from PyPI. Due to WebAssembly’s requirements for CORS and PEP 691 when running in browsers, and the fact that Tsinghua’s TUNA mirror doesn’t support CORS, this creates some challenges.\u003C/p>\n\u003Cp>PyPI is not directly accessible in mainland China, but there are many mirrors available. Institutions like Tsinghua University, Alibaba Cloud, Tencent Cloud, and Huawei Cloud provide mirror services. However, except for Tsinghua’s TUNA mirror, none of them support the JSON-based Simple API for Python (\u003Ca href=\"https://peps.python.org/pep-0691/\">PEP 691\u003C/a>).\u003C/p>\n\u003Cp>Since WebAssembly requires both CORS support and PEP 691 compliance when running in browsers, and Tsinghua’s TUNA mirror doesn’t support CORS, there might not be any suitable PyPI mirrors available in mainland China for Micropip.\u003C/p>\n\u003Cp>Given this situation, I’ve set up a Cloudflare-based mirror that supports both PEP 691 and CORS.\u003C/p>\n\u003Cp>You can build this using either Workers or Snippets, each with their own advantages and disadvantages:\u003C/p>\n\u003Ch3 id=\"workers\">\u003Ca href=\"https://workers.cloudflare.com/\">Workers\u003C/a>\u003C/h3>\n\u003Cp>Pros: Available with the free plan.\u003C/p>\n\u003Cp>Cons: Generates many Worker requests, which might exceed free plan limits and require payment or become unusable.\u003C/p>\n\u003Ch3 id=\"snippets\">\u003Ca href=\"https://developers.cloudflare.com/rules/snippets/\">Snippets\u003C/a>\u003C/h3>\n\u003Cp>Pros: Doesn’t generate Worker requests, supports high usage volumes. Cons: Currently only available for Pro plans and above, not available on Free tier.\u003C/p>\n\u003Ch2 id=\"code\">Code\u003C/h2>\n\u003Cp>The corresponding code has been open-sourced and is available at:\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/cloudflare-pypi-mirror\">https://github.com/ccbikai/cloudflare-pypi-mirror\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/cloudflare-pypi-mirror\">\u003Cimg src=\"https://github.html.zone/ccbikai/cloudflare-pypi-mirror\" alt=\"Cloudflare PyPI Mirror\">\u003C/a>\u003C/p>",{"headings":148,"localImagePaths":158,"remoteImagePaths":159,"frontmatter":160,"imagePaths":161},[149,152,155],{"depth":91,"slug":150,"text":151},"workers","Workers",{"depth":91,"slug":153,"text":154},"snippets","Snippets",{"depth":78,"slug":156,"text":157},"code","Code",[],[],{"layout":27,"title":139,"description":140,"dateFormatted":141},[],"cloudflare-pypi-mirror.md","deploy-fediverse-instance",{"id":163,"data":165,"body":168,"filePath":169,"digest":170,"rendered":171,"legacyId":179},{"title":166,"description":166,"dateFormatted":167},"Low-Cost Deployment of Federated Universe Personal Instances","Nov 27, 2023","I came across the concept of the Fediverse at the beginning of this year and found that it is the social network I have always envisioned: each instance is like an isolated island, connected through the network to communicate with each other.\n\n> To learn more about the Fediverse, you can read the blog posts from these individuals:\n>\n> - [Introduction to the Fediverse](https://zerovip.vercel.app/zh/59563/)\n> - [Fediverse: The Federated Universe](https://wzyboy.im/post/1486.html)\n> - [What is the Fediverse and Can It Decentralize the Internet?](https://fermi.ink/posts/2022/11/22/01/)\n> - [What is Mastodon and How to Use It](https://limboy.me/posts/mastodon/)\n> - [Fediverse Guide for Twitter Users](https://wzyboy.im/post/1513.html)\n\nAs a self-hosting enthusiast, I wanted to deploy my own instance. I asked about the cost of self-hosting on Mastodon and found that the minimum cost is $15/year for a server and domain name. In order to reduce costs, I didn't purchase a VPS and instead deployed my own instance on my Homelab. It has been running for half a year with a few issues (mainly due to my tinkering) such as internet or power outages at home. Since downtime results in lost messages, I decided to migrate to a server.\n\nAmong the popular software, Mastodon has more features but consumes more resources, so I chose [Pleroma](https://pleroma.social/) which consumes fewer resources but still meets my needs. I deployed it on various free services, achieving a server cost of $0 with only the domain name cost remaining. It has been running stable for a quarter.\n\n![chi@miantiao.me](https://static.miantiao.me/share/nNbzS2/miantiao.me_chi.jpg)\n\nTherefore, I would like to share this solution:\n\n- Cloud platforms:\n  1. [Koyeb](https://app.koyeb.com/)\n  2. [Northflank](https://northflank.com/)\n  3. [Zeabur](https://s.mt.ci/WrK7Dc) (Originally free, but now only available through subscription plans (free plan is for testing only))\n\n- Database:\n  1. [Aiven](https://s.mt.ci/dgQGhM)\n  2. [Neon](https://neon.tech/)\n\n- Cloud storage:\n  1. [Cloudflare R2](https://www.cloudflare.com/zh-cn/developer-platform/r2/)\n  2. [Backblaze B2](https://www.backblaze.com/)\n\n- CDN:\n  1. [Cloudflare](https://www.cloudflare.com/)\n\nDeployment tutorial:\n\n[![ccbikai/pleroma-on-cloud - GitHub](https://github.html.zone/ccbikai/pleroma-on-cloud)](https://github.com/ccbikai/pleroma-on-cloud)\n\nRemember, free things are often the most expensive. It is important to regularly back up the database and cloud storage.\n\n**Lastly, feel free to follow me on the Fediverse (Mastodon, Pleroma, etc.) at [@chi@miantiao.me](https://miantiao.me/@chi).**","src/content/post/deploy-fediverse-instance.md","3c6a7cd9a94f1a53",{"html":172,"metadata":173},"\u003Cp>I came across the concept of the Fediverse at the beginning of this year and found that it is the social network I have always envisioned: each instance is like an isolated island, connected through the network to communicate with each other.\u003C/p>\n\u003Cblockquote>\n\u003Cp>To learn more about the Fediverse, you can read the blog posts from these individuals:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://zerovip.vercel.app/zh/59563/\">Introduction to the Fediverse\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://wzyboy.im/post/1486.html\">Fediverse: The Federated Universe\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://fermi.ink/posts/2022/11/22/01/\">What is the Fediverse and Can It Decentralize the Internet?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://limboy.me/posts/mastodon/\">What is Mastodon and How to Use It\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://wzyboy.im/post/1513.html\">Fediverse Guide for Twitter Users\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/blockquote>\n\u003Cp>As a self-hosting enthusiast, I wanted to deploy my own instance. I asked about the cost of self-hosting on Mastodon and found that the minimum cost is $15/year for a server and domain name. In order to reduce costs, I didn’t purchase a VPS and instead deployed my own instance on my Homelab. It has been running for half a year with a few issues (mainly due to my tinkering) such as internet or power outages at home. Since downtime results in lost messages, I decided to migrate to a server.\u003C/p>\n\u003Cp>Among the popular software, Mastodon has more features but consumes more resources, so I chose \u003Ca href=\"https://pleroma.social/\">Pleroma\u003C/a> which consumes fewer resources but still meets my needs. I deployed it on various free services, achieving a server cost of $0 with only the domain name cost remaining. It has been running stable for a quarter.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/nNbzS2/miantiao.me_chi.jpg\" alt=\"chi@miantiao.me\">\u003C/p>\n\u003Cp>Therefore, I would like to share this solution:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Cloud platforms:\u003C/p>\n\u003Col>\n\u003Cli>\u003Ca href=\"https://app.koyeb.com/\">Koyeb\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://northflank.com/\">Northflank\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://s.mt.ci/WrK7Dc\">Zeabur\u003C/a> (Originally free, but now only available through subscription plans (free plan is for testing only))\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>\n\u003Cp>Database:\u003C/p>\n\u003Col>\n\u003Cli>\u003Ca href=\"https://s.mt.ci/dgQGhM\">Aiven\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://neon.tech/\">Neon\u003C/a>\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>\n\u003Cp>Cloud storage:\u003C/p>\n\u003Col>\n\u003Cli>\u003Ca href=\"https://www.cloudflare.com/zh-cn/developer-platform/r2/\">Cloudflare R2\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.backblaze.com/\">Backblaze B2\u003C/a>\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>\n\u003Cp>CDN:\u003C/p>\n\u003Col>\n\u003Cli>\u003Ca href=\"https://www.cloudflare.com/\">Cloudflare\u003C/a>\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Deployment tutorial:\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/pleroma-on-cloud\">\u003Cimg src=\"https://github.html.zone/ccbikai/pleroma-on-cloud\" alt=\"ccbikai/pleroma-on-cloud - GitHub\">\u003C/a>\u003C/p>\n\u003Cp>Remember, free things are often the most expensive. It is important to regularly back up the database and cloud storage.\u003C/p>\n\u003Cp>\u003Cstrong>Lastly, feel free to follow me on the Fediverse (Mastodon, Pleroma, etc.) at \u003Ca href=\"https://miantiao.me/@chi\">@chi@miantiao.me\u003C/a>.\u003C/strong>\u003C/p>",{"headings":174,"localImagePaths":175,"remoteImagePaths":176,"frontmatter":177,"imagePaths":178},[],[],[],{"layout":27,"title":166,"description":166,"dateFormatted":167},[],"deploy-fediverse-instance.md","email-ml",{"id":180,"data":182,"body":185,"filePath":186,"digest":187,"rendered":188,"legacyId":205},{"title":183,"description":183,"dateFormatted":184},"Email.ML - minimalistic temporary email","Jun 6th, 2024","[**Email.ML**](https://email.ml/) is a minimalistic temporary email service.\n\nYou can get a temporary email without revealing any personal information, which greatly protects your privacy.\n\nIt supports selecting multiple domain names, making it convenient for you to use in different scenarios.\n\n100% running on the **Cloudflare** network, providing you with a super-fast experience.\n\n## Statement\n\nThis service is not available in China Mainland.\n\n## Privacy\n\nThis site only stores an email name for this session, and the emails are temporarily stored in **Cloudflare** data centers. They will be completely deleted after the email expires.\n\n## Website\n\n[https://email.ml/](https://email.ml/)","src/content/post/email-ml.md","78fb1ac99220b529",{"html":189,"metadata":190},"\u003Cp>\u003Ca href=\"https://email.ml/\">\u003Cstrong>Email.ML\u003C/strong>\u003C/a> is a minimalistic temporary email service.\u003C/p>\n\u003Cp>You can get a temporary email without revealing any personal information, which greatly protects your privacy.\u003C/p>\n\u003Cp>It supports selecting multiple domain names, making it convenient for you to use in different scenarios.\u003C/p>\n\u003Cp>100% running on the \u003Cstrong>Cloudflare\u003C/strong> network, providing you with a super-fast experience.\u003C/p>\n\u003Ch2 id=\"statement\">Statement\u003C/h2>\n\u003Cp>This service is not available in China Mainland.\u003C/p>\n\u003Ch2 id=\"privacy\">Privacy\u003C/h2>\n\u003Cp>This site only stores an email name for this session, and the emails are temporarily stored in \u003Cstrong>Cloudflare\u003C/strong> data centers. They will be completely deleted after the email expires.\u003C/p>\n\u003Ch2 id=\"website\">Website\u003C/h2>\n\u003Cp>\u003Ca href=\"https://email.ml/\">https://email.ml/\u003C/a>\u003C/p>",{"headings":191,"localImagePaths":201,"remoteImagePaths":202,"frontmatter":203,"imagePaths":204},[192,195,198],{"depth":78,"slug":193,"text":194},"statement","Statement",{"depth":78,"slug":196,"text":197},"privacy","Privacy",{"depth":78,"slug":199,"text":200},"website","Website",[],[],{"layout":27,"title":183,"description":183,"dateFormatted":184},[],"email-ml.md","dns-surf",{"id":206,"data":208,"body":211,"filePath":212,"digest":213,"rendered":214,"legacyId":224},{"title":209,"description":209,"dateFormatted":210},"DNS.Surf - check DNS resolution results in different regions","Nov 8, 2023","[**DNS.Surf**](https://dns.surf/) is like a traveler that helps you explore the scenery of DNS resolution results in different regions.\n\nIt provides resolution services from 18 regions and has over 100 optional DNS resolvers, just like choosing how to travel between different cities and countries.\n\nThis website runs entirely on Vercel, like a stable and efficient means of transportation, providing you with fast and reliable service.\n\n## Privacy\n\nFor privacy concerns, you can use it with confidence, as the website does not collect or store any user information. It's like enjoying the scenery during your travels without worrying about personal information leakage.\n\n## Website\n\n[https://dns.surf/](https://dns.surf/)","src/content/post/dns-surf.md","751ac5668820e548",{"html":215,"metadata":216},"\u003Cp>\u003Ca href=\"https://dns.surf/\">\u003Cstrong>DNS.Surf\u003C/strong>\u003C/a> is like a traveler that helps you explore the scenery of DNS resolution results in different regions.\u003C/p>\n\u003Cp>It provides resolution services from 18 regions and has over 100 optional DNS resolvers, just like choosing how to travel between different cities and countries.\u003C/p>\n\u003Cp>This website runs entirely on Vercel, like a stable and efficient means of transportation, providing you with fast and reliable service.\u003C/p>\n\u003Ch2 id=\"privacy\">Privacy\u003C/h2>\n\u003Cp>For privacy concerns, you can use it with confidence, as the website does not collect or store any user information. It’s like enjoying the scenery during your travels without worrying about personal information leakage.\u003C/p>\n\u003Ch2 id=\"website\">Website\u003C/h2>\n\u003Cp>\u003Ca href=\"https://dns.surf/\">https://dns.surf/\u003C/a>\u003C/p>",{"headings":217,"localImagePaths":220,"remoteImagePaths":221,"frontmatter":222,"imagePaths":223},[218,219],{"depth":78,"slug":196,"text":197},{"depth":78,"slug":199,"text":200},[],[],{"layout":27,"title":209,"description":209,"dateFormatted":210},[],"dns-surf.md","cloudflare-audio-concat",{"id":225,"data":227,"body":231,"filePath":232,"digest":233,"rendered":234,"legacyId":248},{"title":228,"description":229,"dateFormatted":230},"Use Cloudflare Workers to concat audio files","How to use Cloudflare Workers to merge audio files using FFmpeg in the browser.","April 19, 2025","I recently updated the [Hacker News Chinese Podcast](https://hacker-news.agi.li/) to use a dual-speaker format. Since current speech synthesis models don't handle two-person dialogues very well, I needed a way to merge the audio files for each speaker.\n\nThe project runs on the Cloudflare Workers runtime, which lacks many Node.js features and cannot call C++ extensions. Furthermore, Cloudflare Containers aren't generally available yet. This meant I had to use the Browser Rendering API for the audio merging task.\n\nFFmpeg is the standard tool for merging audio files, and fortunately, it can now run in the browser via WASM. So, the overall technical approach is:\n\n1.  Use a Worker Binding to launch a browser instance (via the Browser Rendering API).\n2.  Have the browser navigate to an audio merging page, perform the merge operation on the audio files, and return the result as a Blob.\n3.  Receive the Blob back in the Worker and upload it to R2 storage.\n\nThe overall code footprint for this isn't large, but debugging was tricky because Browser Rendering runs remotely.\n\nHere's the final implementation code:\n\n### Browser-Side Audio Merging Code\n\n```\n\u003C!doctype html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\n    \u003Cmeta charset=\"UTF-8\" />\n    \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    \u003Ctitle>Audio\u003C/title>\n  \u003C/head>\n  \u003Cbody>\n    \u003Cscript>\n      const concatAudioFilesOnBrowser = async (audioFiles) => {\n        const script = document.createElement('script')\n        script.src = 'https://unpkg.com/@ffmpeg/ffmpeg@0.11.6/dist/ffmpeg.min.js'\n        document.head.appendChild(script)\n        await new Promise((resolve) => (script.onload = resolve))\n\n        const { createFFmpeg, fetchFile } = FFmpeg\n        const ffmpeg = createFFmpeg({ log: true })\n\n        await ffmpeg.load()\n\n        // Download and write each file to FFmpeg's virtual file system\n        for (const [index, audioFile] of audioFiles.entries()) {\n          const audioData = await fetchFile(audioFile)\n          ffmpeg.FS('writeFile', `input${index}.mp3`, audioData)\n        }\n\n        // Create a file list for ffmpeg concat\n        const fileList = audioFiles.map((_, i) => `file 'input${i}.mp3'`).join('\\n')\n        ffmpeg.FS('writeFile', 'filelist.txt', fileList)\n\n        // Execute FFmpeg command to concatenate files\n        await ffmpeg.run(\n          '-f',\n          'concat',\n          '-safe',\n          '0',\n          '-i',\n          'filelist.txt',\n          '-c:a',\n          'libmp3lame',\n          '-q:a',\n          '5',\n          'output.mp3',\n        )\n\n        // Read the output file\n        const data = ffmpeg.FS('readFile', 'output.mp3')\n\n        // Create a downloadable link\n        const blob = new Blob([data.buffer], { type: 'audio/mp3' })\n\n        // Clean up\n        audioFiles.forEach((_, i) => {\n          ffmpeg.FS('unlink', `input${i}.mp3`)\n        })\n        ffmpeg.FS('unlink', 'filelist.txt')\n        ffmpeg.FS('unlink', 'output.mp3')\n\n        return blob\n      }\n    \u003C/script>\n  \u003C/body>\n\u003C/html>\n```\n\n### Worker Codes\n\n```\nexport async function concatAudioFiles(audioFiles: string[], BROWSER: Fetcher, { workerUrl }: { workerUrl: string }) {\n  const browser = await puppeteer.launch(BROWSER)\n  const page = await browser.newPage()\n  await page.goto(`${workerUrl}/audio`)\n\n  console.info('start concat audio files', audioFiles)\n  const fileUrl = await page.evaluate(async (audioFiles) => {\n    // JS runs here in the browser.\n    // @ts-expect-error Objects in the browser\n    const blob = await concatAudioFilesOnBrowser(audioFiles)\n\n    const result = new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onloadend = () => resolve(reader.result)\n      reader.onerror = reject\n      reader.readAsDataURL(blob)\n    })\n    return await result\n  }, audioFiles) as string\n\n  console.info('concat audio files result', fileUrl.substring(0, 100))\n\n  await browser.close()\n\n  const response = await fetch(fileUrl)\n  return await response.blob()\n}\n\nconst audio = await concatAudioFiles(audioFiles, env.BROWSER, { workerUrl: env.HACKER_NEWS_WORKER_URL })\nreturn new Response(audio)\n```\n\nThe above code is basically written by Cursor, and the final effect can be viewed at [Hacker News Code Repository](https://github.com/ccbikai/hacker-news/tree/main/worker).","src/content/post/cloudflare-audio-concat.md","ef6b9b72de6b3f83",{"html":235,"metadata":236},"\u003Cp>I recently updated the \u003Ca href=\"https://hacker-news.agi.li/\">Hacker News Chinese Podcast\u003C/a> to use a dual-speaker format. Since current speech synthesis models don’t handle two-person dialogues very well, I needed a way to merge the audio files for each speaker.\u003C/p>\n\u003Cp>The project runs on the Cloudflare Workers runtime, which lacks many Node.js features and cannot call C++ extensions. Furthermore, Cloudflare Containers aren’t generally available yet. This meant I had to use the Browser Rendering API for the audio merging task.\u003C/p>\n\u003Cp>FFmpeg is the standard tool for merging audio files, and fortunately, it can now run in the browser via WASM. So, the overall technical approach is:\u003C/p>\n\u003Col>\n\u003Cli>Use a Worker Binding to launch a browser instance (via the Browser Rendering API).\u003C/li>\n\u003Cli>Have the browser navigate to an audio merging page, perform the merge operation on the audio files, and return the result as a Blob.\u003C/li>\n\u003Cli>Receive the Blob back in the Worker and upload it to R2 storage.\u003C/li>\n\u003C/ol>\n\u003Cp>The overall code footprint for this isn’t large, but debugging was tricky because Browser Rendering runs remotely.\u003C/p>\n\u003Cp>Here’s the final implementation code:\u003C/p>\n\u003Ch3 id=\"browser-side-audio-merging-code\">Browser-Side Audio Merging Code\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>&#x3C;!doctype html>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>&#x3C;html lang=\"en\">\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  &#x3C;head>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    &#x3C;meta charset=\"UTF-8\" />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    &#x3C;title>Audio&#x3C;/title>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  &#x3C;/head>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  &#x3C;body>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    &#x3C;script>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      const concatAudioFilesOnBrowser = async (audioFiles) => {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        const script = document.createElement('script')\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        script.src = 'https://unpkg.com/@ffmpeg/ffmpeg@0.11.6/dist/ffmpeg.min.js'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        document.head.appendChild(script)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        await new Promise((resolve) => (script.onload = resolve))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        const { createFFmpeg, fetchFile } = FFmpeg\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        const ffmpeg = createFFmpeg({ log: true })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        await ffmpeg.load()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        // Download and write each file to FFmpeg's virtual file system\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        for (const [index, audioFile] of audioFiles.entries()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          const audioData = await fetchFile(audioFile)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          ffmpeg.FS('writeFile', `input${index}.mp3`, audioData)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        // Create a file list for ffmpeg concat\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        const fileList = audioFiles.map((_, i) => `file 'input${i}.mp3'`).join('\\n')\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        ffmpeg.FS('writeFile', 'filelist.txt', fileList)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        // Execute FFmpeg command to concatenate files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        await ffmpeg.run(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          '-f',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          'concat',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          '-safe',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          '0',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          '-i',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          'filelist.txt',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          '-c:a',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          'libmp3lame',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          '-q:a',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          '5',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          'output.mp3',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        // Read the output file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        const data = ffmpeg.FS('readFile', 'output.mp3')\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        // Create a downloadable link\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        const blob = new Blob([data.buffer], { type: 'audio/mp3' })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        // Clean up\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        audioFiles.forEach((_, i) => {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>          ffmpeg.FS('unlink', `input${i}.mp3`)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        ffmpeg.FS('unlink', 'filelist.txt')\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        ffmpeg.FS('unlink', 'output.mp3')\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        return blob\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    &#x3C;/script>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  &#x3C;/body>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>&#x3C;/html>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"worker-codes\">Worker Codes\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>export async function concatAudioFiles(audioFiles: string[], BROWSER: Fetcher, { workerUrl }: { workerUrl: string }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  const browser = await puppeteer.launch(BROWSER)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  const page = await browser.newPage()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  await page.goto(`${workerUrl}/audio`)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  console.info('start concat audio files', audioFiles)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  const fileUrl = await page.evaluate(async (audioFiles) => {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    // JS runs here in the browser.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    // @ts-expect-error Objects in the browser\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    const blob = await concatAudioFilesOnBrowser(audioFiles)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    const result = new Promise((resolve, reject) => {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      const reader = new FileReader()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      reader.onloadend = () => resolve(reader.result)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      reader.onerror = reject\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      reader.readAsDataURL(blob)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    return await result\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  }, audioFiles) as string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  console.info('concat audio files result', fileUrl.substring(0, 100))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  await browser.close()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  const response = await fetch(fileUrl)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  return await response.blob()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>const audio = await concatAudioFiles(audioFiles, env.BROWSER, { workerUrl: env.HACKER_NEWS_WORKER_URL })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>return new Response(audio)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The above code is basically written by Cursor, and the final effect can be viewed at \u003Ca href=\"https://github.com/ccbikai/hacker-news/tree/main/worker\">Hacker News Code Repository\u003C/a>.\u003C/p>",{"headings":237,"localImagePaths":244,"remoteImagePaths":245,"frontmatter":246,"imagePaths":247},[238,241],{"depth":91,"slug":239,"text":240},"browser-side-audio-merging-code","Browser-Side Audio Merging Code",{"depth":91,"slug":242,"text":243},"worker-codes","Worker Codes",[],[],{"layout":27,"title":228,"description":229,"dateFormatted":230},[],"cloudflare-audio-concat.md","sink",{"id":249,"data":251,"body":255,"filePath":256,"digest":257,"rendered":258,"legacyId":279},{"title":252,"description":253,"dateFormatted":254},"Sink - A short link system based on Cloudflare with visit statistics","A short link system based on Cloudflare with visit statistics","Jun 4th, 2024","I previously shared some websites on [Twitter](https://x.com/0xKaiBi) using short links to make it easier to see if people are interested. Among these link shortening systems, Dub provides the best user experience, but it has a fatal flaw: once the monthly clicks exceed 1000, you can no longer view the statistics.\n\nWhile surfing the internet at home during the Qingming Festival, I discovered that [Cloudflare Workers Analytics Engine](https://developers.cloudflare.com/analytics/analytics-engine/) supports data writing and API data querying. So, I created an MVP version myself, capable of handling statistics for up to 3,000,000 visits per month. Cloudflare's backend likely uses Clickhouse, so performance shouldn't be a significant issue.\n\nDuring the Labor Day holiday, I improved the frontend UI at home and used it for about half a month, finding it satisfactory. I have open-sourced it for everyone to use.\n\n## Features\n\n- Link shortening\n- Visit statistics\n- Serverless deployment\n- Custom Slug\n- 🪄 AI-generated Slug\n- Link expiration\n\n## Demo\n\n[Sink.Cool](https://sink.cool/dashboard)\n\nSite Token: `SinkCool`\n\n### Site-wide Analysis\n\n![Site-wide Analysis](https://static.miantiao.me/share/CBuVes/sink.cool_dashboard.png)\n\n\u003Cdetails>\n  \u003Csummary>\u003Cb>Link Management\u003C/b>\u003C/summary>\n  \u003Cimg alt=\"Link Management\" src=\"https://static.miantiao.me/share/uQVX7Q/sink.cool_dashboard_links.png\"/>\n\u003C/details>\n\n\u003Cdetails>\n  \u003Csummary>\u003Cb>Individual Link Analysis\u003C/b>\u003C/summary>\n  \u003Cimg alt=\"Individual Link Analysis\" src=\"https://static.miantiao.me/share/WfyCXT/sink.cool_dashboard_link_slug=0.png\"/>\n\u003C/details>\n\n## Open Source\n\n[![ccbikai/sink - GitHub](https://github.html.zone/ccbikai/sink)](https://github.com/ccbikai/sink)\n\n## Roadmap (WIP)\n\n- Browser extension\n- Raycast extension\n- Apple Shortcuts\n- Enhanced link management (based on Cloudflare D1)\n- Enhanced analysis (support filtering)\n- Panel performance optimization (support infinite loading)\n- Support for other platforms (maybe)\n\n---\n\nFinally, feel free to follow me on [Twitter](https://x.com/0xKaiBi) for updates on development progress and to share some web development news.","src/content/post/sink.md","e223c4140245f97d",{"html":259,"metadata":260},"\u003Cp>I previously shared some websites on \u003Ca href=\"https://x.com/0xKaiBi\">Twitter\u003C/a> using short links to make it easier to see if people are interested. Among these link shortening systems, Dub provides the best user experience, but it has a fatal flaw: once the monthly clicks exceed 1000, you can no longer view the statistics.\u003C/p>\n\u003Cp>While surfing the internet at home during the Qingming Festival, I discovered that \u003Ca href=\"https://developers.cloudflare.com/analytics/analytics-engine/\">Cloudflare Workers Analytics Engine\u003C/a> supports data writing and API data querying. So, I created an MVP version myself, capable of handling statistics for up to 3,000,000 visits per month. Cloudflare’s backend likely uses Clickhouse, so performance shouldn’t be a significant issue.\u003C/p>\n\u003Cp>During the Labor Day holiday, I improved the frontend UI at home and used it for about half a month, finding it satisfactory. I have open-sourced it for everyone to use.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>Link shortening\u003C/li>\n\u003Cli>Visit statistics\u003C/li>\n\u003Cli>Serverless deployment\u003C/li>\n\u003Cli>Custom Slug\u003C/li>\n\u003Cli>🪄 AI-generated Slug\u003C/li>\n\u003Cli>Link expiration\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"demo\">Demo\u003C/h2>\n\u003Cp>\u003Ca href=\"https://sink.cool/dashboard\">Sink.Cool\u003C/a>\u003C/p>\n\u003Cp>Site Token: \u003Ccode>SinkCool\u003C/code>\u003C/p>\n\u003Ch3 id=\"site-wide-analysis\">Site-wide Analysis\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/CBuVes/sink.cool_dashboard.png\" alt=\"Site-wide Analysis\">\u003C/p>\n\u003Cdetails>\n  \u003Csummary>\u003Cb>Link Management\u003C/b>\u003C/summary>\n  \u003Cimg alt=\"Link Management\" src=\"https://static.miantiao.me/share/uQVX7Q/sink.cool_dashboard_links.png\">\n\u003C/details>\n\u003Cdetails>\n  \u003Csummary>\u003Cb>Individual Link Analysis\u003C/b>\u003C/summary>\n  \u003Cimg alt=\"Individual Link Analysis\" src=\"https://static.miantiao.me/share/WfyCXT/sink.cool_dashboard_link_slug=0.png\">\n\u003C/details>\n\u003Ch2 id=\"open-source\">Open Source\u003C/h2>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/sink\">\u003Cimg src=\"https://github.html.zone/ccbikai/sink\" alt=\"ccbikai/sink - GitHub\">\u003C/a>\u003C/p>\n\u003Ch2 id=\"roadmap-wip\">Roadmap (WIP)\u003C/h2>\n\u003Cul>\n\u003Cli>Browser extension\u003C/li>\n\u003Cli>Raycast extension\u003C/li>\n\u003Cli>Apple Shortcuts\u003C/li>\n\u003Cli>Enhanced link management (based on Cloudflare D1)\u003C/li>\n\u003Cli>Enhanced analysis (support filtering)\u003C/li>\n\u003Cli>Panel performance optimization (support infinite loading)\u003C/li>\n\u003Cli>Support for other platforms (maybe)\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Cp>Finally, feel free to follow me on \u003Ca href=\"https://x.com/0xKaiBi\">Twitter\u003C/a> for updates on development progress and to share some web development news.\u003C/p>",{"headings":261,"localImagePaths":275,"remoteImagePaths":276,"frontmatter":277,"imagePaths":278},[262,265,266,269,272],{"depth":78,"slug":263,"text":264},"features","Features",{"depth":78,"slug":88,"text":89},{"depth":91,"slug":267,"text":268},"site-wide-analysis","Site-wide Analysis",{"depth":78,"slug":270,"text":271},"open-source","Open Source",{"depth":78,"slug":273,"text":274},"roadmap-wip","Roadmap (WIP)",[],[],{"layout":27,"title":252,"description":253,"dateFormatted":254},[],"sink.md","github-og-image",{"id":280,"data":282,"body":285,"filePath":286,"digest":287,"rendered":288,"legacyId":321},{"title":283,"description":283,"dateFormatted":284},"Extract GitHub OpenGraph Images for Card Previews","Dec 19, 2023","Previously, when sharing GitHub on my blog, I always used [GitHub Repository Card](https://gh-card.dev/) for sharing, but it doesn't have good support for Chinese and doesn't support line breaks.\n\n[![ccbikai/cloudflare-worker-image - GitHub](https://gh-card.dev/repos/ccbikai/cloudflare-worker-image.svg?fullname=)](https://github.com/ccbikai/cloudflare-worker-image)\n\nOriginally, I planned to create my own using [@vercel/og](https://vercel.com/docs/functions/edge-functions/og-image-generation), but I accidentally discovered that GitHub provides comprehensive and beautiful Open Graph images on Twitter. So, I wrote a script to extract and use them for blog previews.\n\n## Demo\n\n![nasa/fprime - GitHub](https://github.html.zone/nasa/fprime)\n\n![A framework for building Open Graph images](https://static.miantiao.me/share/9ZxTs8/RZHfnD.png)\n\nIn addition to repositories, GitHub's Open Graph also supports previews for Issue, Pull Request, Discussion, and Commit modules.\n\n## Usage\n\n**Modify `.com` to `.html.zone` on any GitHub page**.\n\nFor example, [https://github.com/vercel/next.js](https://github.com/vercel/next.js) => [https://github.html.zone/vercel/next.js](https://github.html.zone/vercel/next.js).\n\n### Previews\n\n#### Repo\n\n![Repo](https://github.html.zone/vercel/next.js)\n\n#### Issue\n\n![Issue](https://github.html.zone/vuejs/core/issues/9862)\n\n#### Pull Request\n\n![Pull Request](https://github.html.zone/lobehub/lobe-chat/pull/529)\n\n#### Discussion\n\n![Discussion](https://github.html.zone/lobehub/lobe-chat/discussions/551)\n\n#### Commit\n\n![Commit](https://github.html.zone/vercel/next.js/commit/a65fb162989fd00ca21534947538b8dbb6bf7f86)\n\n## Source Code\n\nThe code has been shared on GitHub for those interested to explore.\n\n[![ccbikai/github-og-image - GitHub](https://github.html.zone/ccbikai/github-og-image)](https://github.com/ccbikai/github-og-image)","src/content/post/github-og-image.md","1d7d77feea9b2ff3",{"html":289,"metadata":290},"\u003Cp>Previously, when sharing GitHub on my blog, I always used \u003Ca href=\"https://gh-card.dev/\">GitHub Repository Card\u003C/a> for sharing, but it doesn’t have good support for Chinese and doesn’t support line breaks.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/cloudflare-worker-image\">\u003Cimg src=\"https://gh-card.dev/repos/ccbikai/cloudflare-worker-image.svg?fullname=\" alt=\"ccbikai/cloudflare-worker-image - GitHub\">\u003C/a>\u003C/p>\n\u003Cp>Originally, I planned to create my own using \u003Ca href=\"https://vercel.com/docs/functions/edge-functions/og-image-generation\">@vercel/og\u003C/a>, but I accidentally discovered that GitHub provides comprehensive and beautiful Open Graph images on Twitter. So, I wrote a script to extract and use them for blog previews.\u003C/p>\n\u003Ch2 id=\"demo\">Demo\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://github.html.zone/nasa/fprime\" alt=\"nasa/fprime - GitHub\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/9ZxTs8/RZHfnD.png\" alt=\"A framework for building Open Graph images\">\u003C/p>\n\u003Cp>In addition to repositories, GitHub’s Open Graph also supports previews for Issue, Pull Request, Discussion, and Commit modules.\u003C/p>\n\u003Ch2 id=\"usage\">Usage\u003C/h2>\n\u003Cp>\u003Cstrong>Modify \u003Ccode>.com\u003C/code> to \u003Ccode>.html.zone\u003C/code> on any GitHub page\u003C/strong>.\u003C/p>\n\u003Cp>For example, \u003Ca href=\"https://github.com/vercel/next.js\">https://github.com/vercel/next.js\u003C/a> => \u003Ca href=\"https://github.html.zone/vercel/next.js\">https://github.html.zone/vercel/next.js\u003C/a>.\u003C/p>\n\u003Ch3 id=\"previews\">Previews\u003C/h3>\n\u003Ch4 id=\"repo\">Repo\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://github.html.zone/vercel/next.js\" alt=\"Repo\">\u003C/p>\n\u003Ch4 id=\"issue\">Issue\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://github.html.zone/vuejs/core/issues/9862\" alt=\"Issue\">\u003C/p>\n\u003Ch4 id=\"pull-request\">Pull Request\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://github.html.zone/lobehub/lobe-chat/pull/529\" alt=\"Pull Request\">\u003C/p>\n\u003Ch4 id=\"discussion\">Discussion\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://github.html.zone/lobehub/lobe-chat/discussions/551\" alt=\"Discussion\">\u003C/p>\n\u003Ch4 id=\"commit\">Commit\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://github.html.zone/vercel/next.js/commit/a65fb162989fd00ca21534947538b8dbb6bf7f86\" alt=\"Commit\">\u003C/p>\n\u003Ch2 id=\"source-code\">Source Code\u003C/h2>\n\u003Cp>The code has been shared on GitHub for those interested to explore.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/github-og-image\">\u003Cimg src=\"https://github.html.zone/ccbikai/github-og-image\" alt=\"ccbikai/github-og-image - GitHub\">\u003C/a>\u003C/p>",{"headings":291,"localImagePaths":317,"remoteImagePaths":318,"frontmatter":319,"imagePaths":320},[292,293,296,299,302,305,308,311,314],{"depth":78,"slug":88,"text":89},{"depth":78,"slug":294,"text":295},"usage","Usage",{"depth":91,"slug":297,"text":298},"previews","Previews",{"depth":95,"slug":300,"text":301},"repo","Repo",{"depth":95,"slug":303,"text":304},"issue","Issue",{"depth":95,"slug":306,"text":307},"pull-request","Pull Request",{"depth":95,"slug":309,"text":310},"discussion","Discussion",{"depth":95,"slug":312,"text":313},"commit","Commit",{"depth":78,"slug":315,"text":316},"source-code","Source Code",[],[],{"layout":27,"title":283,"description":283,"dateFormatted":284},[],"github-og-image.md","looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong",{"id":322,"data":324,"body":328,"filePath":329,"digest":330,"rendered":331,"legacyId":339},{"title":325,"description":326,"dateFormatted":327},"L(O*62).ONG - Make your URL longer","loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong is the longest domain name","Jun 1, 2024","[![GitHub](https://github.html.zone/ccbikai/loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong)](https://github.com/ccbikai/loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong)\n\nThis little toy was finished last week. Just a few lines of code.\n\nEncountered many issues during deployment, mainly related to HTTPS certificates.\n\nThe longest segment of the domain name is 63 characters. The commonName of the HTTPS certificate can be up to 64 characters.\n\nThis caused Cloudflare, Vercel, and Netlify to be unable to use Let's Encrypt to sign HTTPS certificates (because they use the domain name in commonName), but Zeabur can use Let's Encrypt to sign HTTPS certificates.\n\nFinally, switching the Cloudflare certificate to Google Trust Services LLC successfully signed the certificate.\n\nYou can view the relevant certificates at [https://crt.sh/?q=loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong](https://crt.sh/?q=loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong).","src/content/post/looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong.md","69ae77c9ccd1db68",{"html":332,"metadata":333},"\u003Cp>\u003Ca href=\"https://github.com/ccbikai/loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong\">\u003Cimg src=\"https://github.html.zone/ccbikai/loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong\" alt=\"GitHub\">\u003C/a>\u003C/p>\n\u003Cp>This little toy was finished last week. Just a few lines of code.\u003C/p>\n\u003Cp>Encountered many issues during deployment, mainly related to HTTPS certificates.\u003C/p>\n\u003Cp>The longest segment of the domain name is 63 characters. The commonName of the HTTPS certificate can be up to 64 characters.\u003C/p>\n\u003Cp>This caused Cloudflare, Vercel, and Netlify to be unable to use Let’s Encrypt to sign HTTPS certificates (because they use the domain name in commonName), but Zeabur can use Let’s Encrypt to sign HTTPS certificates.\u003C/p>\n\u003Cp>Finally, switching the Cloudflare certificate to Google Trust Services LLC successfully signed the certificate.\u003C/p>\n\u003Cp>You can view the relevant certificates at \u003Ca href=\"https://crt.sh/?q=loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong\">https://crt.sh/?q=loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong\u003C/a>.\u003C/p>",{"headings":334,"localImagePaths":335,"remoteImagePaths":336,"frontmatter":337,"imagePaths":338},[],[],[],{"layout":27,"title":325,"description":326,"dateFormatted":327},[],"looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong.md","run-python-programs-easily-in-the-browser",{"id":340,"data":342,"body":345,"filePath":346,"digest":347,"rendered":348,"legacyId":356},{"title":343,"description":344,"dateFormatted":141},"Run Python in Your Browser Effortlessly","Run Python programs in the browser easily using Pyodide and WebAssembly for seamless execution of code and packages","Microsoft recently open-sourced [MarkItDown](https://github.com/microsoft/markitdown), a program that converts Office files to Markdown format. The project quickly climbed to GitHub's trending list upon release.\n\nHowever, since MarkItDown is a Python program, it might be challenging for non-technical users to use. To address this issue, I thought of using WebAssembly technology to run Python code directly in the browser.\n\nPyodide is an open-source program that runs Python in the browser, using WebAssembly to port CPython, so it supports all Python syntax. Cloudflare's Python Workers also use Pyodide.\n\n> Pyodide is a port of CPython to WebAssembly/Emscripten.\n>\n> Pyodide makes it possible to install and run Python packages in the browser using micropip. Any pure Python package with wheels available on PyPI is supported.\n>\n> Many packages with C extensions have also been ported for use with Pyodide. These include common packages like regex, PyYAML, lxml, and scientific Python packages including NumPy, pandas, SciPy, Matplotlib, and scikit-learn. Pyodide comes with a robust JavaScript ⟺ Python foreign function interface that allows you to freely mix these languages in your code with minimal friction. This includes comprehensive support for error handling, async/await, and more.\n>\n> When used in the browser, Python has full access to the Web APIs.\n\nTrying to run MarkItDown was surprisingly smooth, proving that WebAssembly is truly the future of browsers.\n\nThe main challenges faced and solutions:\n\n1. **File Transfer Issue**: How to pass user-selected files to the Python runtime in the Worker?\n\n2. **Dependency Installation Issue**: Limited access to PyPI in mainland China.\n\nEventually, we successfully implemented a MarkItDown tool that runs entirely in the browser. Feel free to try it out at [Office File to Markdown](https://www.html.zone/markitdown/).\n\n[![Office File to Markdown](https://www.html.zone/markitdown.png)](https://www.html.zone/markitdown/)\n\nHere's the core code for running Python in the Worker:\n\n```javascript\n// eslint-disable-next-line no-undef\nimportScripts('https://testingcf.jsdelivr.net/pyodide/v0.26.4/full/pyodide.js')\n\n\nasync function loadPyodideAndPackages() {\n  // eslint-disable-next-line no-undef\n  const pyodide = await loadPyodide()\n  globalThis.pyodide = pyodide\n\n  await pyodide.loadPackage('micropip')\n\n  const micropip = pyodide.pyimport('micropip')\n\n  // micropip.set_index_urls([\n  // 'https://pypi.your.domains/pypi/simple',  \n  // ])\n\n  await micropip.install('markitdown==0.0.1a2')\n}\n\nconst pyodideReadyPromise = loadPyodideAndPackages()\n\nglobalThis.onmessage = async (event) => {\n  await pyodideReadyPromise\n\n  const file = event.data\n  try {\n    console.log('file', file)\n    const startTime = Date.now()\n    globalThis.pyodide.FS.writeFile(`/${file.filename}`, file.buffer)\n\n    await globalThis.pyodide.runPythonAsync(`\nfrom markitdown import MarkItDown\n\nmarkitdown = MarkItDown()\n\nresult = markitdown.convert(\"/${file.filename}\")\nprint(result.text_content)\n\nwith open(\"/${file.filename}.md\", \"w\") as file:\n  file.write(result.text_content)\n`)\n    globalThis.postMessage({\n      filename: `${file.filename}.md`,\n      content: globalThis.pyodide.FS.readFile(`/${file.filename}.md`, { encoding: 'utf8' }),\n      time: Date.now() - startTime,\n    })\n  }\n  catch (error) {\n    globalThis.postMessage({ error: error.message || 'convert error', filename: file.filename })\n  }\n}\n```","src/content/post/run-python-programs-easily-in-the-browser.md","8a4c14dd81c7619f",{"html":349,"metadata":350},"\u003Cp>Microsoft recently open-sourced \u003Ca href=\"https://github.com/microsoft/markitdown\">MarkItDown\u003C/a>, a program that converts Office files to Markdown format. The project quickly climbed to GitHub’s trending list upon release.\u003C/p>\n\u003Cp>However, since MarkItDown is a Python program, it might be challenging for non-technical users to use. To address this issue, I thought of using WebAssembly technology to run Python code directly in the browser.\u003C/p>\n\u003Cp>Pyodide is an open-source program that runs Python in the browser, using WebAssembly to port CPython, so it supports all Python syntax. Cloudflare’s Python Workers also use Pyodide.\u003C/p>\n\u003Cblockquote>\n\u003Cp>Pyodide is a port of CPython to WebAssembly/Emscripten.\u003C/p>\n\u003Cp>Pyodide makes it possible to install and run Python packages in the browser using micropip. Any pure Python package with wheels available on PyPI is supported.\u003C/p>\n\u003Cp>Many packages with C extensions have also been ported for use with Pyodide. These include common packages like regex, PyYAML, lxml, and scientific Python packages including NumPy, pandas, SciPy, Matplotlib, and scikit-learn. Pyodide comes with a robust JavaScript ⟺ Python foreign function interface that allows you to freely mix these languages in your code with minimal friction. This includes comprehensive support for error handling, async/await, and more.\u003C/p>\n\u003Cp>When used in the browser, Python has full access to the Web APIs.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Trying to run MarkItDown was surprisingly smooth, proving that WebAssembly is truly the future of browsers.\u003C/p>\n\u003Cp>The main challenges faced and solutions:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>File Transfer Issue\u003C/strong>: How to pass user-selected files to the Python runtime in the Worker?\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Dependency Installation Issue\u003C/strong>: Limited access to PyPI in mainland China.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Eventually, we successfully implemented a MarkItDown tool that runs entirely in the browser. Feel free to try it out at \u003Ca href=\"https://www.html.zone/markitdown/\">Office File to Markdown\u003C/a>.\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.html.zone/markitdown/\">\u003Cimg src=\"https://www.html.zone/markitdown.png\" alt=\"Office File to Markdown\">\u003C/a>\u003C/p>\n\u003Cp>Here’s the core code for running Python in the Worker:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// eslint-disable-next-line no-undef\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">importScripts\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://testingcf.jsdelivr.net/pyodide/v0.26.4/full/pyodide.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> loadPyodideAndPackages\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // eslint-disable-next-line no-undef\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> pyodide\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> loadPyodide\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  globalThis.pyodide \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pyodide\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pyodide.\u003C/span>\u003Cspan style=\"color:#B392F0\">loadPackage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'micropip'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> micropip\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pyodide.\u003C/span>\u003Cspan style=\"color:#B392F0\">pyimport\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'micropip'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // micropip.set_index_urls([\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // 'https://pypi.your.domains/pypi/simple',  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> micropip.\u003C/span>\u003Cspan style=\"color:#B392F0\">install\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'markitdown==0.0.1a2'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> pyodideReadyPromise\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> loadPyodideAndPackages\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">globalThis.\u003C/span>\u003Cspan style=\"color:#B392F0\">onmessage\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pyodideReadyPromise\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> file\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> event.data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'file'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, file)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> startTime\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    globalThis.pyodide.\u003C/span>\u003Cspan style=\"color:#79B8FF\">FS\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">writeFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">file\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">filename\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, file.buffer)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> globalThis.pyodide.\u003C/span>\u003Cspan style=\"color:#B392F0\">runPythonAsync\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">from markitdown import MarkItDown\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">markitdown = MarkItDown()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">result = markitdown.convert(\"/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">file\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">filename\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\")\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">print(result.text_content)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">with open(\"/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">file\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">filename\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}.md\", \"w\") as file:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  file.write(result.text_content)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    globalThis.\u003C/span>\u003Cspan style=\"color:#B392F0\">postMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      filename: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">file\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">filename\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}.md`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      content: globalThis.pyodide.\u003C/span>\u003Cspan style=\"color:#79B8FF\">FS\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">readFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">file\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">filename\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}.md`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { encoding: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'utf8'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      time: Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> startTime,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    globalThis.\u003C/span>\u003Cspan style=\"color:#B392F0\">postMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ error: error.message \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'convert error'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, filename: file.filename })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":351,"localImagePaths":352,"remoteImagePaths":353,"frontmatter":354,"imagePaths":355},[],[],[],{"layout":27,"title":343,"description":344,"dateFormatted":141},[],"run-python-programs-easily-in-the-browser.md","google-safe-browsing-alternative",{"id":357,"data":359,"body":362,"filePath":363,"digest":364,"rendered":365,"legacyId":373},{"title":360,"description":360,"dateFormatted":361},"How to Replace Google Safe Browsing with Cloudflare Zero Trust","Jul 14th, 2024","So, get this, right? I built the first version of [L(O\\*62).ONG](https://loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong/) using server-side redirects, but Google slapped me with a security warning the very next day. Talk about a buzzkill! I had to scramble and switch to local redirects with a warning message before sending folks on their way. Then came the fun part – begging Google for forgiveness.\n\nNow, the smart money would've been on using Google Safe Browsing for redirects. But here's the catch: Safe Browsing's got a daily limit – 10,000 calls, and that's it. Plus, no custom lists. And since I'm all about keeping things simple and sticking with Cloudflare, Safe Browsing was a no-go.\n\nFast forward to a while back, I was chewing the fat with someone online, and bam! It hit me like a bolt of lightning. Why not use a secure DNS server with built-in filters for adult content and all that shady stuff to check if a domain's on the up-and-up?  Figured I'd give [Family 1.1.1.1](https://blog.cloudflare.com/zh-cn/introducing-1-1-1-1-for-families-zh-cn/) a shot, and guess what? It actually worked!  Problem was, no custom lists there either.  Then I remembered messing around with Cloudflare Zero Trust Gateway back in my [HomeLab](https://www.awesome-homelab.com/) days.  Turns out, that was the golden ticket – a solution so good, it's almost criminal.\n\n**Here's the deal: Cloudflare Zero Trust's Gateway comes packing a built-in DNS (DoH) server and lets you set up firewall rules like a boss. You can block stuff based on how risky a domain is, what kind of content it has, and even use your own custom naughty-and-nice lists. And get this – it pulls data from Cloudflare's own stash, over 30 open intelligence sources, fancy machine learning models, and even feedback from the community. Talk about covering all the bases! Want the nitty-gritty?  Hit up the [official documentation](https://developers.cloudflare.com/cloudflare-one/policies/gateway/domain-categories/#docs-content).**\n\nSo, I went ahead and blocked all the high-risk categories – adult stuff, gambling sites, government domains, anything NSFW, newly registered domains, you name it. Plus, I've got my own little blacklists and whitelists that I keep nice and tidy.\n\n![Risk List](https://static.miantiao.me/share/2024/ROJmki/CleanShot%202024-07-07%20at%2022.22.25.png)\n\nOnce I was done tweaking the settings, I got myself a shiny new DoH address:\n\n![DoH](https://static.miantiao.me/share/2024/iY5dK8/CleanShot%202024-07-07%20at%2022.26.23.png)\n\nTo hook it up to my project, I used this handy-dandy code:\n\n```js\nasync function isSafeUrl(\n  url,\n  DoH = \"https://family.cloudflare-dns.com/dns-query\"\n) {\n  let safe = false;\n  try {\n    const { hostname } = new URL(url);\n    const res = await fetch(`${DoH}?type=A&name=${hostname}`, {\n      headers: {\n        accept: \"application/dns-json\",\n      },\n      cf: {\n        cacheEverything: true,\n        cacheTtlByStatus: { \"200-299\": 86400 },\n      },\n    });\n    const dnsResult = await res.json();\n    if (dnsResult && Array.isArray(dnsResult.Answer)) {\n      const isBlock = dnsResult.Answer.some(\n        answer => answer.data === \"0.0.0.0\"\n      );\n      safe = !isBlock;\n    }\n  } catch (e) {\n    console.warn(\"isSafeUrl fail: \", url, e);\n  }\n  return safe;\n}\n\n```\n\nAnd here's the kicker: Cloudflare Zero Trust's management panel has this sweet visualization interface that lets you see what's getting blocked and what's not.  You can see for yourself – it's got the kibosh on some adult sites and those brand-spanking-new domains.\n\n![Visualization Interface](https://static.miantiao.me/share/2024/5hOp5X/CleanShot%202024-07-07%20at%2022.30.36.png)\n\nOh, and if a domain ends up on the wrong side of the tracks, you can always check the log to see what went down.\n\n![Log](https://static.miantiao.me/share/2024/EmRMB3/52WCkd.png)","src/content/post/google-safe-browsing-alternative.md","7af4805c9a1809b0",{"html":366,"metadata":367},"\u003Cp>So, get this, right? I built the first version of \u003Ca href=\"https://loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ong/\">L(O*62).ONG\u003C/a> using server-side redirects, but Google slapped me with a security warning the very next day. Talk about a buzzkill! I had to scramble and switch to local redirects with a warning message before sending folks on their way. Then came the fun part – begging Google for forgiveness.\u003C/p>\n\u003Cp>Now, the smart money would’ve been on using Google Safe Browsing for redirects. But here’s the catch: Safe Browsing’s got a daily limit – 10,000 calls, and that’s it. Plus, no custom lists. And since I’m all about keeping things simple and sticking with Cloudflare, Safe Browsing was a no-go.\u003C/p>\n\u003Cp>Fast forward to a while back, I was chewing the fat with someone online, and bam! It hit me like a bolt of lightning. Why not use a secure DNS server with built-in filters for adult content and all that shady stuff to check if a domain’s on the up-and-up?  Figured I’d give \u003Ca href=\"https://blog.cloudflare.com/zh-cn/introducing-1-1-1-1-for-families-zh-cn/\">Family 1.1.1.1\u003C/a> a shot, and guess what? It actually worked!  Problem was, no custom lists there either.  Then I remembered messing around with Cloudflare Zero Trust Gateway back in my \u003Ca href=\"https://www.awesome-homelab.com/\">HomeLab\u003C/a> days.  Turns out, that was the golden ticket – a solution so good, it’s almost criminal.\u003C/p>\n\u003Cp>\u003Cstrong>Here’s the deal: Cloudflare Zero Trust’s Gateway comes packing a built-in DNS (DoH) server and lets you set up firewall rules like a boss. You can block stuff based on how risky a domain is, what kind of content it has, and even use your own custom naughty-and-nice lists. And get this – it pulls data from Cloudflare’s own stash, over 30 open intelligence sources, fancy machine learning models, and even feedback from the community. Talk about covering all the bases! Want the nitty-gritty?  Hit up the \u003Ca href=\"https://developers.cloudflare.com/cloudflare-one/policies/gateway/domain-categories/#docs-content\">official documentation\u003C/a>.\u003C/strong>\u003C/p>\n\u003Cp>So, I went ahead and blocked all the high-risk categories – adult stuff, gambling sites, government domains, anything NSFW, newly registered domains, you name it. Plus, I’ve got my own little blacklists and whitelists that I keep nice and tidy.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/2024/ROJmki/CleanShot%202024-07-07%20at%2022.22.25.png\" alt=\"Risk List\">\u003C/p>\n\u003Cp>Once I was done tweaking the settings, I got myself a shiny new DoH address:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/2024/iY5dK8/CleanShot%202024-07-07%20at%2022.26.23.png\" alt=\"DoH\">\u003C/p>\n\u003Cp>To hook it up to my project, I used this handy-dandy code:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> isSafeUrl\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  url\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  DoH\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"https://family.cloudflare-dns.com/dns-query\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> safe \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">hostname\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> res\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">DoH\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}?type=A&#x26;name=${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">hostname\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      headers: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        accept: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"application/dns-json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      cf: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        cacheEverything: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        cacheTtlByStatus: { \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"200-299\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">86400\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> dnsResult\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> res.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dnsResult \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Array.\u003C/span>\u003Cspan style=\"color:#B392F0\">isArray\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(dnsResult.Answer)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> isBlock\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dnsResult.Answer.\u003C/span>\u003Cspan style=\"color:#B392F0\">some\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">        answer\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> answer.data \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"0.0.0.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      safe \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#E1E4E8\">isBlock;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">warn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"isSafeUrl fail: \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, url, e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> safe;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And here’s the kicker: Cloudflare Zero Trust’s management panel has this sweet visualization interface that lets you see what’s getting blocked and what’s not.  You can see for yourself – it’s got the kibosh on some adult sites and those brand-spanking-new domains.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/2024/5hOp5X/CleanShot%202024-07-07%20at%2022.30.36.png\" alt=\"Visualization Interface\">\u003C/p>\n\u003Cp>Oh, and if a domain ends up on the wrong side of the tracks, you can always check the log to see what went down.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/2024/EmRMB3/52WCkd.png\" alt=\"Log\">\u003C/p>",{"headings":368,"localImagePaths":369,"remoteImagePaths":370,"frontmatter":371,"imagePaths":372},[],[],[],{"layout":27,"title":360,"description":360,"dateFormatted":361},[],"google-safe-browsing-alternative.md","use-cloudflare-snippets-to-set-up-a-docker-registry-mirror",{"id":374,"data":376,"body":379,"filePath":380,"digest":381,"rendered":382,"legacyId":390},{"title":377,"description":378,"dateFormatted":141},"Docker Registry Mirror via Cloudflare","Set up a Docker Registry Mirror using Cloudflare Snippets with low-cost proxy solutions and modified code for various container registries","Using Cloudflare Workers to set up Docker image proxies works fine for personal use with low request volumes. However, if made public, high request volumes can incur significant costs.\n\nActually, Cloudflare has an even lighter JS Runtime called Cloudflare Snippets, though it comes with stricter limitations: 5ms CPU execution time, 2MB memory limit, and 32KB code size limit. Still, it's sufficient for request rewriting purposes.\n\nUnfortunately, Cloudflare Snippets isn't currently available for Free plans, although [their blog mentions that Free plans can create 5 Snippets](https://blog.cloudflare.com/zh-cn/snippets-announcement/).\n\nIf you have a Pro plan, you can slightly modify the Cloudflare Workers code to run it. It supports Docker Hub, Google Container Registry, GitHub Container Registry, Amazon Elastic Container Registry, Kubernetes Container Registry, Quay, and Cloudsmith.\n\nModified code:\n\n```javascript\n// Raw Codes: https://github.com/ciiiii/cloudflare-docker-proxy/blob/master/src/index.js\n\nconst CUSTOM_DOMAIN = 'your.domains'\nconst MODE = 'production'\n\nconst dockerHub = 'https://registry-1.docker.io'\n\nconst routes = {\n    // production\n    [`docker.${CUSTOM_DOMAIN}`]: dockerHub,\n    [`quay.${CUSTOM_DOMAIN}`]: 'https://quay.io',\n    [`gcr.${CUSTOM_DOMAIN}`]: 'https://gcr.io',\n    [`k8s-gcr.${CUSTOM_DOMAIN}`]: 'https://k8s.gcr.io',\n    [`k8s.${CUSTOM_DOMAIN}`]: 'https://registry.k8s.io',\n    [`ghcr.${CUSTOM_DOMAIN}`]: 'https://ghcr.io',\n    [`cloudsmith.${CUSTOM_DOMAIN}`]: 'https://docker.cloudsmith.io',\n    [`ecr.${CUSTOM_DOMAIN}`]: 'https://public.ecr.aws',\n\n    // staging\n    [`docker-staging.${CUSTOM_DOMAIN}`]: dockerHub,\n}\n\nasync function handleRequest(request) {\n    const url = new URL(request.url)\n    const upstream = routeByHosts(url.hostname)\n    if (upstream === '') {\n        return new Response(\n            JSON.stringify({\n                routes,\n            }), {\n                status: 404,\n            },\n        )\n    }\n    const isDockerHub = upstream === dockerHub\n    const authorization = request.headers.get('Authorization')\n    if (url.pathname === '/v2/') {\n        const newUrl = new URL(`${upstream}/v2/`)\n        const headers = new Headers()\n        if (authorization) {\n            headers.set('Authorization', authorization)\n        }\n        // check if need to authenticate\n        const resp = await fetch(newUrl.toString(), {\n            method: 'GET',\n            headers,\n            redirect: 'follow',\n        })\n        if (resp.status === 401) {\n            return responseUnauthorized(url)\n        }\n        return resp\n    }\n    // get token\n    if (url.pathname === '/v2/auth') {\n        const newUrl = new URL(`${upstream}/v2/`)\n        const resp = await fetch(newUrl.toString(), {\n            method: 'GET',\n            redirect: 'follow',\n        })\n        if (resp.status !== 401) {\n            return resp\n        }\n        const authenticateStr = resp.headers.get('WWW-Authenticate')\n        if (authenticateStr === null) {\n            return resp\n        }\n        const wwwAuthenticate = parseAuthenticate(authenticateStr)\n        let scope = url.searchParams.get('scope')\n        // autocomplete repo part into scope for DockerHub library images\n        // Example: repository:busybox:pull => repository:library/busybox:pull\n        if (scope && isDockerHub) {\n            const scopeParts = scope.split(':')\n            if (scopeParts.length === 3 && !scopeParts[1].includes('/')) {\n                scopeParts[1] = `library/${scopeParts[1]}`\n                scope = scopeParts.join(':')\n            }\n        }\n        return await fetchToken(wwwAuthenticate, scope, authorization)\n    }\n    // redirect for DockerHub library images\n    // Example: /v2/busybox/manifests/latest => /v2/library/busybox/manifests/latest\n    if (isDockerHub) {\n        const pathParts = url.pathname.split('/')\n        if (pathParts.length === 5) {\n            pathParts.splice(2, 0, 'library')\n            const redirectUrl = new URL(url)\n            redirectUrl.pathname = pathParts.join('/')\n            return Response.redirect(redirectUrl, 301)\n        }\n    }\n    // foward requests\n    const newUrl = new URL(upstream + url.pathname)\n    const newReq = new Request(newUrl, {\n        method: request.method,\n        headers: request.headers,\n        redirect: 'follow',\n    })\n    const resp = await fetch(newReq)\n    if (resp.status === 401) {\n        return responseUnauthorized(url)\n    }\n    return resp\n}\n\nfunction routeByHosts(host) {\n    if (host in routes) {\n        return routes[host]\n    }\n    if (MODE === 'debug') {\n        return dockerHub\n    }\n    return ''\n}\n\nfunction parseAuthenticate(authenticateStr) {\n    // sample: Bearer realm=\"https://auth.ipv6.docker.com/token\",service=\"registry.docker.io\"\n    // match strings after =\" and before \"\n    const re = /(?\u003C==\")(?:\\\\.|[^\"\\\\])*(?=\")/g\n    const matches = authenticateStr.match(re)\n    if (matches == null || matches.length \u003C 2) {\n        throw new Error(`invalid Www-Authenticate Header: ${authenticateStr}`)\n    }\n    return {\n        realm: matches[0],\n        service: matches[1],\n    }\n}\n\nasync function fetchToken(wwwAuthenticate, scope, authorization) {\n    const url = new URL(wwwAuthenticate.realm)\n    if (wwwAuthenticate.service.length) {\n        url.searchParams.set('service', wwwAuthenticate.service)\n    }\n    if (scope) {\n        url.searchParams.set('scope', scope)\n    }\n    const headers = new Headers()\n    if (authorization) {\n        headers.set('Authorization', authorization)\n    }\n    return await fetch(url, {\n        method: 'GET',\n        headers\n    })\n}\n\nfunction responseUnauthorized(url) {\n    const headers = new(Headers)()\n    if (MODE === 'debug') {\n        headers.set(\n            'Www-Authenticate',\n            `Bearer realm=\"http://${url.host}/v2/auth\",service=\"cloudflare-docker-proxy\"`,\n        )\n    } else {\n        headers.set(\n            'Www-Authenticate',\n            `Bearer realm=\"https://${url.hostname}/v2/auth\",service=\"cloudflare-docker-proxy\"`,\n        )\n    }\n    return new Response(JSON.stringify({\n        message: 'UNAUTHORIZED'\n    }), {\n        status: 401,\n        headers,\n    })\n}\n\nexport default {\n    fetch: handleRequest,\n}\n```","src/content/post/use-cloudflare-snippets-to-set-up-a-docker-registry-mirror.md","98a3e917c3ea254c",{"html":383,"metadata":384},"\u003Cp>Using Cloudflare Workers to set up Docker image proxies works fine for personal use with low request volumes. However, if made public, high request volumes can incur significant costs.\u003C/p>\n\u003Cp>Actually, Cloudflare has an even lighter JS Runtime called Cloudflare Snippets, though it comes with stricter limitations: 5ms CPU execution time, 2MB memory limit, and 32KB code size limit. Still, it’s sufficient for request rewriting purposes.\u003C/p>\n\u003Cp>Unfortunately, Cloudflare Snippets isn’t currently available for Free plans, although \u003Ca href=\"https://blog.cloudflare.com/zh-cn/snippets-announcement/\">their blog mentions that Free plans can create 5 Snippets\u003C/a>.\u003C/p>\n\u003Cp>If you have a Pro plan, you can slightly modify the Cloudflare Workers code to run it. It supports Docker Hub, Google Container Registry, GitHub Container Registry, Amazon Elastic Container Registry, Kubernetes Container Registry, Quay, and Cloudsmith.\u003C/p>\n\u003Cp>Modified code:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Raw Codes: https://github.com/ciiiii/cloudflare-docker-proxy/blob/master/src/index.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'your.domains'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MODE\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'production'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> dockerHub\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'https://registry-1.docker.io'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> routes\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // production\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`docker.${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]: dockerHub,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`quay.${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://quay.io'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`gcr.${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://gcr.io'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`k8s-gcr.${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://k8s.gcr.io'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`k8s.${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://registry.k8s.io'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`ghcr.${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://ghcr.io'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`cloudsmith.${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://docker.cloudsmith.io'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`ecr.${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://public.ecr.aws'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // staging\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`docker-staging.${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CUSTOM_DOMAIN\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]: dockerHub,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleRequest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> url\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request.url)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> upstream\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> routeByHosts\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url.hostname)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (upstream \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                routes,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }), {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                status: \u003C/span>\u003Cspan style=\"color:#79B8FF\">404\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> isDockerHub\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> upstream \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dockerHub\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> authorization\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> request.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Authorization'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (url.pathname \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '/v2/'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> newUrl\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">upstream\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}/v2/`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> headers\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Headers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (authorization) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Authorization'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, authorization)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // check if need to authenticate\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> resp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(newUrl.\u003C/span>\u003Cspan style=\"color:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(), {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            method: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'GET'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            headers,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            redirect: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'follow'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (resp.status \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 401\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#B392F0\"> responseUnauthorized\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> resp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // get token\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (url.pathname \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '/v2/auth'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> newUrl\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">upstream\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}/v2/`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> resp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(newUrl.\u003C/span>\u003Cspan style=\"color:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(), {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            method: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'GET'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            redirect: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'follow'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (resp.status \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 401\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> resp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> authenticateStr\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> resp.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'WWW-Authenticate'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (authenticateStr \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> resp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> wwwAuthenticate\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> parseAuthenticate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(authenticateStr)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> scope \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url.searchParams.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'scope'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // autocomplete repo part into scope for DockerHub library images\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // Example: repository:busybox:pull => repository:library/busybox:pull\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (scope \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> isDockerHub) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> scopeParts\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> scope.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">':'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (scopeParts.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#E1E4E8\">scopeParts[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">].\u003C/span>\u003Cspan style=\"color:#B392F0\">includes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                scopeParts[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `library/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">scopeParts\u003C/span>\u003Cspan style=\"color:#9ECBFF\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#9ECBFF\">]\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                scope \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> scopeParts.\u003C/span>\u003Cspan style=\"color:#B392F0\">join\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">':'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchToken\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(wwwAuthenticate, scope, authorization)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // redirect for DockerHub library images\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Example: /v2/busybox/manifests/latest => /v2/library/busybox/manifests/latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (isDockerHub) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> pathParts\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url.pathname.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (pathParts.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            pathParts.\u003C/span>\u003Cspan style=\"color:#B392F0\">splice\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'library'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> redirectUrl\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            redirectUrl.pathname \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pathParts.\u003C/span>\u003Cspan style=\"color:#B392F0\">join\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Response.\u003C/span>\u003Cspan style=\"color:#B392F0\">redirect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(redirectUrl, \u003C/span>\u003Cspan style=\"color:#79B8FF\">301\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // foward requests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> newUrl\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(upstream \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url.pathname)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> newReq\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(newUrl, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        method: request.method,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        headers: request.headers,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        redirect: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'follow'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> resp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(newReq)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (resp.status \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 401\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#B392F0\"> responseUnauthorized\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> resp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> routeByHosts\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">host\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (host \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> routes) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> routes[host]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">MODE\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'debug'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dockerHub\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> parseAuthenticate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">authenticateStr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // sample: Bearer realm=\"https://auth.ipv6.docker.com/token\",service=\"registry.docker.io\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // match strings after =\" and before \"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> re\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#DBEDFF\">(?&#x3C;==\")(?:\u003C/span>\u003Cspan style=\"color:#85E89D;font-weight:bold\">\\\\\u003C/span>\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#79B8FF\">[\u003C/span>\u003Cspan style=\"color:#F97583\">^\u003C/span>\u003Cspan style=\"color:#79B8FF\">\"\u003C/span>\u003Cspan style=\"color:#85E89D;font-weight:bold\">\\\\\u003C/span>\u003Cspan style=\"color:#79B8FF\">]\u003C/span>\u003Cspan style=\"color:#DBEDFF\">)\u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#DBEDFF\">(?=\")\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">g\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> matches\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> authenticateStr.\u003C/span>\u003Cspan style=\"color:#B392F0\">match\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(re)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (matches \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> matches.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`invalid Www-Authenticate Header: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">authenticateStr\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        realm: matches[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        service: matches[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchToken\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">wwwAuthenticate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">scope\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">authorization\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> url\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(wwwAuthenticate.realm)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (wwwAuthenticate.service.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        url.searchParams.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, wwwAuthenticate.service)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (scope) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        url.searchParams.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'scope'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, scope)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> headers\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Headers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (authorization) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Authorization'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, authorization)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        method: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'GET'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        headers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> responseUnauthorized\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">url\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> headers\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Headers)()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">MODE\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'debug'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            'Www-Authenticate'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            `Bearer realm=\"http://${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">url\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">host\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}/v2/auth\",service=\"cloudflare-docker-proxy\"`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            'Www-Authenticate'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            `Bearer realm=\"https://${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">url\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">hostname\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}/v2/auth\",service=\"cloudflare-docker-proxy\"`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'UNAUTHORIZED'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }), {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        status: \u003C/span>\u003Cspan style=\"color:#79B8FF\">401\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        headers,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    fetch: handleRequest,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":385,"localImagePaths":386,"remoteImagePaths":387,"frontmatter":388,"imagePaths":389},[],[],[],{"layout":27,"title":377,"description":378,"dateFormatted":141},[],"use-cloudflare-snippets-to-set-up-a-docker-registry-mirror.md","vercel-edge-image",{"id":391,"data":393,"body":396,"filePath":397,"digest":398,"rendered":399,"legacyId":433},{"title":394,"description":394,"dateFormatted":395},"Using Vercel Edge to Process Images","Dec 17th, 2023","Previously, I shared an article on [using Cloudflare Worker to process images](https://dev.to/ccbikai/shi-yong-cloudflare-worker-chu-li-tu-pian-38dl-temp-slug-7437591). However, due to the limitations of the free version of Worker, which only allows for 10ms of CPU usage, there were frequent resource overages and high failure rates. Today, I had some free time, so I decided to try using Vercel Edge instead and share my findings with those who are interested.\n\nThe official version of Vercel also supports image processing, but it has a limit of 1000 original images per month and only supports scaling. By using Vercel Edge to process images, you can have additional features such as scaling, cropping, watermarking, and filters. However, please note that the free version of Vercel only allows for 100GB of monthly traffic, so it is recommended to use it in conjunction with a CDN for actual usage.\n\nSupported features:\n\n1. Support for processing PNG, JPG, BMP, ICO, and TIFF format images\n2. Output images in JPG, PNG, and WEBP formats, with WEBP being the default\n3. Support for pipelining, allowing for multiple operations to be performed\n4. Support for whitelisting image URLs to prevent abuse\n5. Graceful degradation in case of processing failure, returning the original image (exceptions are not cached)\n\n## Demo\n\n### Format Conversion\n\n#### WEBP\n\n![webp](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&format=webp)\n\n#### JPG\n\n![jpg](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&format=jpg)\n\n#### PNG\n\n![png](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&format=png)\n\n### Scaling\n\n![resize](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=resize!830,400,2)\n\n### Rotation\n\n![rotate](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=rotate!90)\n\n### Cropping\n\n![rotate](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=crop!0,0,1000,1000)\n\n### Filters\n\n![filter](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=filter%21obsidian)\n\n### Image Watermark\n\n![watermark](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=watermark!https%3A%2F%2Fstatic.miantiao.me%2Fshare%2F6qIq4w%2FFhSUzU.png,20,20)\n\n### Text Watermark\n\n![draw_text](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=draw_text!miantiao.me,20,20)\n\n### Pipelining\n\n#### Scaling + Rotation + Text Watermark\n\n![resize & rotate & draw_text](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=resize!830,400,2%7Crotate!180%7Cdraw_text!miantiao.me,10,10)\n\n#### Scaling + Image Watermark\n\n![resize & watermark](https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&action=resize!830,400,2%7Cwatermark!https%3A%2F%2Fstatic.miantiao.me%2Fshare%2F6qIq4w%2FFhSUzU.png,10,10)\n\nIn theory, it supports various operations available in Photon. If you are interested, you can check the image URLs and modify the parameters according to the [Photon documentation](https://docs.rs/photon-rs/latest/photon_rs/) to try it out yourself. If you encounter any issues, please leave a comment and provide feedback.\n\n## Sharing\n\nI have open-sourced this solution on my GitHub repository, and you can deploy it by following the documentation.\n\n[![ccbikai/vercel-edge-image - GitHub](https://github.html.zone/ccbikai/vercel-edge-image)](https://github.com/ccbikai/vercel-edge-image)\n\n* * *\n\n[![Buy Me A Coffee](https://static.miantiao.me/share/0WmsVP/CcmGr8.png)](https://www.buymeacoffee.com/miantiao)","src/content/post/vercel-edge-image.md","92f82580866ded7e",{"html":400,"metadata":401},"\u003Cp>Previously, I shared an article on \u003Ca href=\"https://dev.to/ccbikai/shi-yong-cloudflare-worker-chu-li-tu-pian-38dl-temp-slug-7437591\">using Cloudflare Worker to process images\u003C/a>. However, due to the limitations of the free version of Worker, which only allows for 10ms of CPU usage, there were frequent resource overages and high failure rates. Today, I had some free time, so I decided to try using Vercel Edge instead and share my findings with those who are interested.\u003C/p>\n\u003Cp>The official version of Vercel also supports image processing, but it has a limit of 1000 original images per month and only supports scaling. By using Vercel Edge to process images, you can have additional features such as scaling, cropping, watermarking, and filters. However, please note that the free version of Vercel only allows for 100GB of monthly traffic, so it is recommended to use it in conjunction with a CDN for actual usage.\u003C/p>\n\u003Cp>Supported features:\u003C/p>\n\u003Col>\n\u003Cli>Support for processing PNG, JPG, BMP, ICO, and TIFF format images\u003C/li>\n\u003Cli>Output images in JPG, PNG, and WEBP formats, with WEBP being the default\u003C/li>\n\u003Cli>Support for pipelining, allowing for multiple operations to be performed\u003C/li>\n\u003Cli>Support for whitelisting image URLs to prevent abuse\u003C/li>\n\u003Cli>Graceful degradation in case of processing failure, returning the original image (exceptions are not cached)\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"demo\">Demo\u003C/h2>\n\u003Ch3 id=\"format-conversion\">Format Conversion\u003C/h3>\n\u003Ch4 id=\"webp\">WEBP\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;format=webp\" alt=\"webp\">\u003C/p>\n\u003Ch4 id=\"jpg\">JPG\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;format=jpg\" alt=\"jpg\">\u003C/p>\n\u003Ch4 id=\"png\">PNG\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;format=png\" alt=\"png\">\u003C/p>\n\u003Ch3 id=\"scaling\">Scaling\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=resize!830,400,2\" alt=\"resize\">\u003C/p>\n\u003Ch3 id=\"rotation\">Rotation\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=rotate!90\" alt=\"rotate\">\u003C/p>\n\u003Ch3 id=\"cropping\">Cropping\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=crop!0,0,1000,1000\" alt=\"rotate\">\u003C/p>\n\u003Ch3 id=\"filters\">Filters\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=filter%21obsidian\" alt=\"filter\">\u003C/p>\n\u003Ch3 id=\"image-watermark\">Image Watermark\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=watermark!https%3A%2F%2Fstatic.miantiao.me%2Fshare%2F6qIq4w%2FFhSUzU.png,20,20\" alt=\"watermark\">\u003C/p>\n\u003Ch3 id=\"text-watermark\">Text Watermark\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=draw_text!miantiao.me,20,20\" alt=\"draw_text\">\u003C/p>\n\u003Ch3 id=\"pipelining\">Pipelining\u003C/h3>\n\u003Ch4 id=\"scaling--rotation--text-watermark\">Scaling + Rotation + Text Watermark\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=resize!830,400,2%7Crotate!180%7Cdraw_text!miantiao.me,10,10\" alt=\"resize &#x26; rotate &#x26; draw_text\">\u003C/p>\n\u003Ch4 id=\"scaling--image-watermark\">Scaling + Image Watermark\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://edge-image.miantiao.me/?url=https%3A%2F%2Fstatic.miantiao.me%2Fshare%2FMTyerw%2Fbanner-2048.jpeg&#x26;action=resize!830,400,2%7Cwatermark!https%3A%2F%2Fstatic.miantiao.me%2Fshare%2F6qIq4w%2FFhSUzU.png,10,10\" alt=\"resize &#x26; watermark\">\u003C/p>\n\u003Cp>In theory, it supports various operations available in Photon. If you are interested, you can check the image URLs and modify the parameters according to the \u003Ca href=\"https://docs.rs/photon-rs/latest/photon_rs/\">Photon documentation\u003C/a> to try it out yourself. If you encounter any issues, please leave a comment and provide feedback.\u003C/p>\n\u003Ch2 id=\"sharing\">Sharing\u003C/h2>\n\u003Cp>I have open-sourced this solution on my GitHub repository, and you can deploy it by following the documentation.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/vercel-edge-image\">\u003Cimg src=\"https://github.html.zone/ccbikai/vercel-edge-image\" alt=\"ccbikai/vercel-edge-image - GitHub\">\u003C/a>\u003C/p>\n\u003Chr>\n\u003Cp>\u003Ca href=\"https://www.buymeacoffee.com/miantiao\">\u003Cimg src=\"https://static.miantiao.me/share/0WmsVP/CcmGr8.png\" alt=\"Buy Me A Coffee\">\u003C/a>\u003C/p>",{"headings":402,"localImagePaths":429,"remoteImagePaths":430,"frontmatter":431,"imagePaths":432},[403,404,405,407,409,411,414,415,416,417,418,419,422,425,428],{"depth":78,"slug":88,"text":89},{"depth":91,"slug":92,"text":93},{"depth":95,"slug":96,"text":406},"WEBP",{"depth":95,"slug":98,"text":408},"JPG",{"depth":95,"slug":100,"text":410},"PNG",{"depth":91,"slug":412,"text":413},"scaling","Scaling",{"depth":91,"slug":105,"text":106},{"depth":91,"slug":108,"text":109},{"depth":91,"slug":111,"text":112},{"depth":91,"slug":114,"text":115},{"depth":91,"slug":117,"text":118},{"depth":91,"slug":420,"text":421},"pipelining","Pipelining",{"depth":95,"slug":423,"text":424},"scaling--rotation--text-watermark","Scaling + Rotation + Text Watermark",{"depth":95,"slug":426,"text":427},"scaling--image-watermark","Scaling + Image Watermark",{"depth":78,"slug":129,"text":130},[],[],{"layout":27,"title":394,"description":394,"dateFormatted":395},[],"vercel-edge-image.md","rss-beauty",{"id":434,"data":436,"body":440,"filePath":441,"digest":442,"rendered":443,"legacyId":475},{"title":437,"description":438,"dateFormatted":439},"RSS.Beauty - Make Your RSS Beautiful!","Beautify your RSS feeds with RSS.Beauty, featuring elegant interfaces, responsive design, and self-hosting support. Try it now!","Dec 31, 2024","> **The tool that has been delayed for nearly half a year is finally completed.**\n\n[RSS.Beauty](https://rss.beauty/) is an RSS beautification tool based on XSLT technology that transforms ordinary RSS/Atom feeds into elegant reading interfaces.\n\n![RSS.Beauty](https://rss.beauty/banner.png)\n\n## Key Features\n\n- 🎨 Beautiful reading interface\n- 🔄 Support for RSS 2.0 and Atom 1.0\n- 📱 Responsive design, mobile-friendly\n- 🔌 One-click subscription to major RSS readers\n- 🖥 Self-hosting support\n\n## Quick Start\n\nVisit [RSS.Beauty](https://rss.beauty) and enter any RSS feed URL to try it out.\n\nOr visit \u003Chttps://rss.beauty/rss?url=https%3A%2F%2Fgithub.com%2Fccbikai%2FRSS.Beauty%2Freleases.atom> to try it out.\n\n## Tech Stack\n\n- [Astro](https://astro.build)\n- [TailwindCSS](https://tailwindcss.com)\n- [XSLT](https://www.w3.org/TR/xslt/)\n\n## Deployment\n\nDetailed deployment guide can be found in [Deployment Guide](./docs/deployment-guide.md).\n\n### Serverless\n\nSupport deployment to Cloudflare Pages, Vercel, Netlify, etc. After [Fork](https://github.com/ccbikai/RSS.Beauty/fork) this project, follow the platform tutorial to deploy.\n\n### Docker\n\n```bash\ndocker pull ghcr.io/ccbikai/rss.beauty:main\ndocker run -d --name rss-beauty -p 4321:4321 ghcr.io/ccbikai/rss.beauty:main\n```\n\n## Credits\n\n- [Tailus UI](https://html.tailus.io/)\n\n## Sponsor\n\n1. [Follow me on 𝕏](https://404.li/kai)\n1. [Sponsor me on GitHub](https://github.com/sponsors/ccbikai)","src/content/post/rss-beauty.md","252d1876fccac895",{"html":444,"metadata":445},"\u003Cblockquote>\n\u003Cp>\u003Cstrong>The tool that has been delayed for nearly half a year is finally completed.\u003C/strong>\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Ca href=\"https://rss.beauty/\">RSS.Beauty\u003C/a> is an RSS beautification tool based on XSLT technology that transforms ordinary RSS/Atom feeds into elegant reading interfaces.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://rss.beauty/banner.png\" alt=\"RSS.Beauty\">\u003C/p>\n\u003Ch2 id=\"key-features\">Key Features\u003C/h2>\n\u003Cul>\n\u003Cli>🎨 Beautiful reading interface\u003C/li>\n\u003Cli>🔄 Support for RSS 2.0 and Atom 1.0\u003C/li>\n\u003Cli>📱 Responsive design, mobile-friendly\u003C/li>\n\u003Cli>🔌 One-click subscription to major RSS readers\u003C/li>\n\u003Cli>🖥 Self-hosting support\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"quick-start\">Quick Start\u003C/h2>\n\u003Cp>Visit \u003Ca href=\"https://rss.beauty\">RSS.Beauty\u003C/a> and enter any RSS feed URL to try it out.\u003C/p>\n\u003Cp>Or visit \u003Ca href=\"https://rss.beauty/rss?url=https%3A%2F%2Fgithub.com%2Fccbikai%2FRSS.Beauty%2Freleases.atom\">https://rss.beauty/rss?url=https%3A%2F%2Fgithub.com%2Fccbikai%2FRSS.Beauty%2Freleases.atom\u003C/a> to try it out.\u003C/p>\n\u003Ch2 id=\"tech-stack\">Tech Stack\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://astro.build\">Astro\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://tailwindcss.com\">TailwindCSS\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.w3.org/TR/xslt/\">XSLT\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"deployment\">Deployment\u003C/h2>\n\u003Cp>Detailed deployment guide can be found in \u003Ca href=\"./docs/deployment-guide.md\">Deployment Guide\u003C/a>.\u003C/p>\n\u003Ch3 id=\"serverless\">Serverless\u003C/h3>\n\u003Cp>Support deployment to Cloudflare Pages, Vercel, Netlify, etc. After \u003Ca href=\"https://github.com/ccbikai/RSS.Beauty/fork\">Fork\u003C/a> this project, follow the platform tutorial to deploy.\u003C/p>\n\u003Ch3 id=\"docker\">Docker\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pull\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ghcr.io/ccbikai/rss.beauty:main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -d\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> rss-beauty\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -p\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 4321:4321\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ghcr.io/ccbikai/rss.beauty:main\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"credits\">Credits\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://html.tailus.io/\">Tailus UI\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"sponsor\">Sponsor\u003C/h2>\n\u003Col>\n\u003Cli>\u003Ca href=\"https://404.li/kai\">Follow me on 𝕏\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/sponsors/ccbikai\">Sponsor me on GitHub\u003C/a>\u003C/li>\n\u003C/ol>",{"headings":446,"localImagePaths":471,"remoteImagePaths":472,"frontmatter":473,"imagePaths":474},[447,450,453,456,459,462,465,468],{"depth":78,"slug":448,"text":449},"key-features","Key Features",{"depth":78,"slug":451,"text":452},"quick-start","Quick Start",{"depth":78,"slug":454,"text":455},"tech-stack","Tech Stack",{"depth":78,"slug":457,"text":458},"deployment","Deployment",{"depth":91,"slug":460,"text":461},"serverless","Serverless",{"depth":91,"slug":463,"text":464},"docker","Docker",{"depth":78,"slug":466,"text":467},"credits","Credits",{"depth":78,"slug":469,"text":470},"sponsor","Sponsor",[],[],{"layout":27,"title":437,"description":438,"dateFormatted":439},[],"rss-beauty.md","guide-to-running-mcp-server-in-a-sandbox",{"id":476,"data":478,"body":482,"filePath":483,"digest":484,"rendered":485,"legacyId":502},{"title":479,"description":480,"dateFormatted":481},"Run MCP Server in a Docker sandbox","Run MCP Server in a Docker sandbox to avoid supply chain attacks.","Apr 25, 2025","MCP is a hot protocol in the AI development industry this year, but its Client/Server (C/S) architecture requires users to run the MCP Server locally.\n\nCommon ways to run MCP Server include stdio methods like npx (NPM ecosystem), uvx (Python ecosystem), Docker, and HTTP (SSE/Streaming) methods. However, running commands with npx and uvx carries significant risks. Accidentally executing a malicious package could lead to sensitive data exposure, posing a major security threat. For details, you can refer to Invariant's article [MCP Security Notification: Tool Poisoning Attacks](https://invariantlabs.ai/blog/mcp-security-notification-tool-poisoning-attacks).\n\nAs a software industry professional, I have a high degree of concern for security. I asked ChatGPT to compile a list of NPM and PyPI supply chain attack incidents from the past 5 years, and it was chilling.\n\n| **Time** | **Event** | **Summary and Scope of Impact** |\n| --- | --- | --- |\n| **February 2021** | **\"Dependency Confusion\" Vulnerability Disclosure** | Security researcher Alex Birsan utilized the **Dependency Confusion** technique to upload packages to NPM/PyPI with the same names as internal libraries used by multiple companies, successfully infiltrating the internal servers of 35 major companies including Apple and Microsoft ([PyPI flooded with 1,275 dependency confusion packages](https://www.sonatype.com/blog/pypi-flooded-with-over-1200-dependency-confusion-packages#:~:text=Dependency%20confusion%3A%20Year%20in%20review)). This demonstration sparked high concern within the industry regarding supply chain risks. |\n| **October 2021** | **UAParser.js Library Hijacked** | The popular library _ua-parser-js_ on NPM, with over 7 million weekly downloads, was compromised by attackers via the maintainer's account to publish malicious versions ([A Timeline of SSC Attacks, Curated by Sonatype](https://www.sonatype.com/resources/vulnerability-timeline#:~:text=%23%23%20%20Popular%20%22ua,Attacked)). Infected versions implanted **password-stealing trojans** and **cryptocurrency miners** upon installation, affecting a large number of developer systems. |\n| **October 2021** | **Poisoning via Fake Roblox Libraries** | Attackers uploaded multiple packages impersonating Roblox API on NPM (e.g., _noblox.js-proxy_), containing obfuscated malicious code. These packages would implant **trojans and ransomware** payloads after installation ([A Timeline of SSC Attacks, Curated by Sonatype](https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,and%20has%20a%20Spooky%20Surprise)). These packages were downloaded thousands of times, demonstrating attackers used **typosquatting** to trick game developers. |\n| **November 2021** | **COA and RC Libraries Successively Hijacked** | Popular libraries on NPM, _coa_ (millions of weekly downloads) and _rc_ (14 million weekly downloads), were successively compromised to publish malicious versions. The affected versions executed **credential-stealing trojans** similar to the UAParser.js case, at one point causing build pipelines to break for numerous projects globally using frameworks like React ([A Timeline of SSC Attacks, Curated by Sonatype](https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,js)) ([A Timeline of SSC Attacks, Curated by Sonatype](https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,Is%20Hijacked%2C%20Too)). Official investigations determined the cause in both cases was compromised maintainer accounts. |\n| **January 2022** | **Colors/Faker Open Source Libraries \"Suicide\"** | The authors of the famous color formatting library _colors.js_ and test data generation library _faker.js_, out of protest, injected destructive code like infinite loops in the latest versions, causing thousands of projects, including those at companies like Meta (Facebook) and Amazon, to crash ([A Timeline of SSC Attacks, Curated by Sonatype](https://www.sonatype.com/resources/vulnerability-timeline#:~:text=Thousands%20of%20open%20source%20projects,companies%20exploiting%20open%20source)) (While not an external attack, it falls within the scope of supply chain poisoning). |\n| **January 2022** | **PyPI: 1,275 Malicious Packages Deployed in Bulk** | A single user frantically published **1,275 malicious packages** to PyPI in one day on January 23rd ([A Timeline of SSC Attacks, Curated by Sonatype](https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,Than%201%2C200%20Dependency%20Confusion%20Packages)). Most of these packages impersonated the names of well-known projects or companies (e.g., _xcryptography_, _Sagepay_, etc.). After installation, they collected fingerprint information like hostname, IP, etc., and exfiltrated it to the attackers via DNS/HTTP ([PyPI flooded with 1,275 dependency confusion packages](https://www.sonatype.com/blog/pypi-flooded-with-over-1200-dependency-confusion-packages#:~:text=The%20,of%20these%20components%20are%20installed)) ([PyPI flooded with 1,275 dependency confusion packages](https://www.sonatype.com/blog/pypi-flooded-with-over-1200-dependency-confusion-packages#:~:text=For%20DNS%3A%20.sub.deliverycontent,online)). PyPI administrators took down all related packages within an hour of receiving the report ([PyPI flooded with 1,275 dependency confusion packages](https://www.sonatype.com/blog/pypi-flooded-with-over-1200-dependency-confusion-packages#:~:text=All%20of%20the%201%2C275%20were,an%20hour%20of%20our%20report)). |\n| **March 2022** | **Node-ipc \"Protestware\" Incident** | The author of _node-ipc_, a commonly used front-end build library, added malicious code in versions v10.1.1–10.1.3: when detecting client IPs belonging to Russia or Belarus, it would **wipe the file system** and overwrite files with heart emojis ([Corrupted open-source software enters the Russian battlefield | ZDNET](https://www.zdnet.com/article/corrupted-open-source-software-enters-the-russian-battlefield/#:~:text=To%20be%20exact%2C%20Miller%20added,annoying%20to%20a%20system%20destroyer)) ([Corrupted open-source software enters the Russian battlefield | ZDNET](https://www.zdnet.com/article/corrupted-open-source-software-enters%20the%20russian%20battlefield/#:~:text=According%20to%20developer%20security%20company,8%2C%20critical)). This library was widely depended upon by Vue CLI, etc., causing widespread damage to user systems and was assigned CVE-2022-23812 (CVSS 9.8) ([Corrupted open-source software enters the Russian battlefield | ZDNET](https://www.zdnet.com/article/corrupted-open-source-software-enters-the-russian-battlefield/#:~:text=According%20to%20developer%20security%20company,8%2C%20critical)). |\n| **October 2022** | **LofyGang Large-Scale Poisoning Campaign** | Security companies discovered a group named \"LofyGang\" distributed nearly **200 malicious packages** on NPM ([LofyGang Distributed ~200 Malicious NPM Packages to Steal Credit Card Data](https://thehackernews.com/2022/10/lofygang-distributed-200-malicious-npm.html#:~:text=Multiple%20campaigns%20that%20distributed%20trojanized,single%20threat%20actor%20dubbed%20LofyGang)). These packages implanted **trojans** through **typosquatting** and by impersonating common library names, stealing developers' credit card information, Discord accounts, and game service login credentials, accumulating thousands of installations ([LofyGang Distributed ~200 Malicious NPM Packages to Steal Credit Card Data](https://thehackernews.com/2022/10/lofygang-distributed-200-malicious-npm.html#:~:text=Multiple%20campaigns%20that%20distributed%20trojanized,single%20threat%20actor%20dubbed%20LofyGang)). This was an organized cybercrime activity that lasted over a year. |\n| **December 2022** | **PyTorch-nightly Dependency Chain Attack** | Well-known deep learning framework PyTorch disclosed that its nightly version suffered a **dependency confusion** supply chain attack between December 25-30 ([Malicious PyTorch dependency ‘torchtriton’ on PyPI | Wiz Blog](https://www.wiz.io/blog/malicious-pytorch-dependency-torchtriton-on-pypi-everything-you-need-to-know#:~:text=means%20that%20anyone%20who%20downloaded,and%20rotate%20any%20discovered%20keys)). Attackers registered a malicious package named _torchtriton_ on PyPI, sharing the same name as a private dependency required by the PyTorch nightly version, resulting in thousands of users who installed the nightly version via pip being affected ([Malicious PyTorch dependency ‘torchtriton’ on PyPI | Wiz Blog](https://www.wiz.io/blog/malicious-pytorch-dependency-torchtriton-on-pypi-everything%20you%20need%20to%20know#:~:text=means%20that%20anyone%20who%20downloaded,and%20rotate%20any%20discovered%20keys)). The malicious _torchtriton_ package, when run, collected system environment variables and secrets and uploaded them to the attacker's server, jeopardizing users' cloud credential security. PyTorch officially issued an urgent warning and replaced the namespace ([Malicious PyTorch dependency ‘torchtriton’ on PyPI | Wiz Blog](https://www.wiz.io/blog/malicious-pytorch-dependency-torchtriton-on-pypi-everything%20you%20need%20to%20know#:~:text=The%20creator%20of%20the%20copied,were%20stored%20on%20impacted%20resources)). |\n| **March 2023** | **\"W4SP Stealer\" Trojan Rampant on PyPI** | Security researchers successively discovered a large number of malicious packages carrying the **W4SP Stealer** information-stealing trojan appearing on PyPI ([W4SP Stealer Discovered in Multiple PyPI Packages Under Various Names](https://thehackernews.com/2022/12/w4sp-stealer-discovered-in-multiple.html#:~:text=Threat%20actors%20have%20published%20yet,malware%20on%20compromised%20developer%20machines)). These trojans have many aliases (e.g., ANGEL Stealer, PURE Stealer, etc.) but essentially all belong to the W4SP family, specifically designed to steal information like user passwords, cryptocurrency wallets, and Discord tokens ([W4SP Stealer Discovered in Multiple PyPI Packages Under Various Names](https://thehackernews.com/2022/12/w4sp-stealer-discovered-in%20multiple.html#:~:text=Interestingly%2C%20while%20the%20malware%20goes,be%20copies%20of%20W4SP%20Stealer)). A single report revealed 16 such malicious packages (e.g., _modulesecurity_, _easycordey_, etc.) ([W4SP Stealer Discovered in Multiple PyPI Packages Under Various Names](https://thehackernews.com/2022/12/w4sp-stealer-discovered-in-multiple.html#:~:text=The%2016%20rogue%20modules%20are,nowsys%2C%20upamonkws%2C%20captchaboy%2C%20and%20proxybooster)). PyPI initiated a cleanup targeting such trojans and strengthened upload detection. |\n| **August 2023** | **Lazarus Group Attacks PyPI** | ReversingLabs reported that a branch of the North Korean hacking group Lazarus published over two dozen (more than 24) malicious packages disguised as popular libraries on PyPI (codenamed \"VMConnect\" operation) ([Software Supply Chain Attacks: A (partial) History](https://www.reversinglabs.com/blog/a-partial-history-of-software-supply-chain-attacks#:~:text=)). These packages attempted to target users in specific industries (e.g., finance) to implant remote access trojans. It is claimed this attack is linked to previous similar activities targeting NuGet, showing state-sponsored hackers' interest in the open-source supply chain. |\n| **2024 and Beyond** | **Ongoing Supply Chain Threats** | Since 2024, new poisoning incidents continue to emerge on NPM and PyPI. For example, in early 2024, fake VS Code-related NPM packages were found to contain remote control spyware ([A Timeline of SSC Attacks, Curated by Sonatype](https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,altered%20ScreenConnect%20utility%20as%20spyware)), and PyPI packages impersonating Solana libraries to steal crypto wallet keys ([A Timeline of SSC Attacks, Curated by Sonatype](https://www.sonatype.com/resources/vulnerability-timeline#:~:text=%23%23%20%20Ideal%20typosquat%20%27solana,steals%20your%20crypto%20wallet%20keys)) were discovered. This indicates that supply chain attacks have become a normalized threat, requiring the ecosystem to continuously raise vigilance and defense capabilities. |\n\nI complained a bit on Twitter, and while complaining, I saw a tweet from a friend who had just encountered a supply chain attack incident.\n\n[![Twitter](https://static.miantiao.me/share/ZUy0MY/twitter.jpeg)](https://x.com/tcdwww/status/1914202659210359108)\n\nFortunately, [@TBXark](https://x.com/TBXark) recommended his **MCP Proxy** project, which makes it very convenient to run MCP Server in Docker. His initial goal was to run MCP Server on a server to reduce client load and facilitate mobile client calls. However, Docker's inherent isolation features perfectly aligned with my requirement for a sandbox.\n\nMCP Proxy runs MCP Servers in Docker and converts the protocol to MCP SSE, allowing users to make all calls via the SSE protocol from the MCP client. This can significantly reduce the risk of arbitrary file reading caused by directly running npx and uvx. *If deployed on an overseas server, it can also help solve network issues.*\n\nHowever, it is currently still possible to read the `/config/config.json` configuration file of MCP Proxy, but the risk is manageable. I have also raised a feature request with the developer to configure the config file with 400 permissions and run the npx and uvx commands as the nobody user. If this can be implemented, it will perfectly solve the arbitrary file reading issue.\n\n## Running MCP Proxy\n\n[![MCP Proxy](https://github.html.zone/TBXark/mcp-proxy)](https://github.com/TBXark/mcp-proxy)\n\nIf you have your own VPS with Docker deployed, you can use the following command to run MCP Proxy.\n\n```\ndocker run -d -p 9090:9090 -v /path/to/config.json:/config/config.json ghcr.io/tbxark/mcp-proxy:latest\n```\n\nIf you don't have your own VPS, you can use the free container service provided by [**claw.cloud**](https://404.li/claw) ($5 credit per month, GitHub registration must be older than 180 days).\n\nSince Claw has container size limitations, we need to use the following environment variables to configure the cache directories for npx and uvx to prevent container crashes.\n\n```\nUV_CACHE_DIR=/cache/uv\nnpm_config_cache=/cache/npm\n```\n\nSimultaneously mount 10GB of storage under the `/cache` path. Refer to my configuration: 0.5c CPU, 512M Memory, 10G Disk.\n\nThe final configuration is as follows:\n\n![Claw](https://static.miantiao.me/share/g4KUgP/claw.jpg)\n\n## Configuring MCP Proxy\n\nThe configuration file needs to be mounted at the `/config/config.json` path. For the complete configuration, please refer to [https://github.com/TBXark/mcp-proxy?tab=readme-ov-file#configurationonfiguration](https://github.com/TBXark/mcp-proxy?tab=readme-ov-file#configurationonfiguration).\n\nBelow is my configuration, for your reference.\n\n```json\n{\n    \"mcpProxy\": {\n        \"baseURL\": \"https://mcp.miantiao.me\",\n        \"addr\": \":9090\",\n        \"name\": \"MCP Proxy\",\n        \"version\": \"1.0.0\",\n        \"options\": {\n          \"panicIfInvalid\": false,\n          \"logEnabled\": true,\n          \"authTokens\": [\n            \"miantiao.me\"\n          ]\n        }\n    },\n    \"mcpServers\": {\n        \"github\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"@modelcontextprotocol/server-github\"\n            ],\n            \"env\": {\n                \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"\u003CYOUR_TOKEN>\"\n            }\n        },\n        \"fetch\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp-server-fetch\"\n            ]\n        },\n        \"amap\": {\n            \"url\": \"https://mcp.amap.com/sse?key=\u003CYOUR_TOKEN>\"\n        }\n    }\n}\n```\n\n## Calling MCP proxy\n\nTaking [**ChatWise**](https://404.li/chatwise) calling fetch as an example, just configure the SSE protocol directly.\n\n![fetch](https://static.miantiao.me/share/mI3zIh/fetch.jpg)\n\nIsn't it simple? When [**ChatWise**](https://404.li/chatwise) releases its mobile version, calling it this way will also be fully usable.\n\n![ChatWise](https://static.miantiao.me/share/t43O9e/chatwise.jpg)","src/content/post/guide-to-running-mcp-server-in-a-sandbox.md","030d6a3ae6f1a050",{"html":486,"metadata":487},"\u003Cp>MCP is a hot protocol in the AI development industry this year, but its Client/Server (C/S) architecture requires users to run the MCP Server locally.\u003C/p>\n\u003Cp>Common ways to run MCP Server include stdio methods like npx (NPM ecosystem), uvx (Python ecosystem), Docker, and HTTP (SSE/Streaming) methods. However, running commands with npx and uvx carries significant risks. Accidentally executing a malicious package could lead to sensitive data exposure, posing a major security threat. For details, you can refer to Invariant’s article \u003Ca href=\"https://invariantlabs.ai/blog/mcp-security-notification-tool-poisoning-attacks\">MCP Security Notification: Tool Poisoning Attacks\u003C/a>.\u003C/p>\n\u003Cp>As a software industry professional, I have a high degree of concern for security. I asked ChatGPT to compile a list of NPM and PyPI supply chain attack incidents from the past 5 years, and it was chilling.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>\u003Cstrong>Time\u003C/strong>\u003C/th>\u003Cth>\u003Cstrong>Event\u003C/strong>\u003C/th>\u003Cth>\u003Cstrong>Summary and Scope of Impact\u003C/strong>\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cstrong>February 2021\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>”Dependency Confusion” Vulnerability Disclosure\u003C/strong>\u003C/td>\u003Ctd>Security researcher Alex Birsan utilized the \u003Cstrong>Dependency Confusion\u003C/strong> technique to upload packages to NPM/PyPI with the same names as internal libraries used by multiple companies, successfully infiltrating the internal servers of 35 major companies including Apple and Microsoft (\u003Ca href=\"https://www.sonatype.com/blog/pypi-flooded-with-over-1200-dependency-confusion-packages#:~:text=Dependency%20confusion%3A%20Year%20in%20review\">PyPI flooded with 1,275 dependency confusion packages\u003C/a>). This demonstration sparked high concern within the industry regarding supply chain risks.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>October 2021\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>UAParser.js Library Hijacked\u003C/strong>\u003C/td>\u003Ctd>The popular library \u003Cem>ua-parser-js\u003C/em> on NPM, with over 7 million weekly downloads, was compromised by attackers via the maintainer’s account to publish malicious versions (\u003Ca href=\"https://www.sonatype.com/resources/vulnerability-timeline#:~:text=%23%23%20%20Popular%20%22ua,Attacked\">A Timeline of SSC Attacks, Curated by Sonatype\u003C/a>). Infected versions implanted \u003Cstrong>password-stealing trojans\u003C/strong> and \u003Cstrong>cryptocurrency miners\u003C/strong> upon installation, affecting a large number of developer systems.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>October 2021\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>Poisoning via Fake Roblox Libraries\u003C/strong>\u003C/td>\u003Ctd>Attackers uploaded multiple packages impersonating Roblox API on NPM (e.g., \u003Cem>noblox.js-proxy\u003C/em>), containing obfuscated malicious code. These packages would implant \u003Cstrong>trojans and ransomware\u003C/strong> payloads after installation (\u003Ca href=\"https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,and%20has%20a%20Spooky%20Surprise\">A Timeline of SSC Attacks, Curated by Sonatype\u003C/a>). These packages were downloaded thousands of times, demonstrating attackers used \u003Cstrong>typosquatting\u003C/strong> to trick game developers.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>November 2021\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>COA and RC Libraries Successively Hijacked\u003C/strong>\u003C/td>\u003Ctd>Popular libraries on NPM, \u003Cem>coa\u003C/em> (millions of weekly downloads) and \u003Cem>rc\u003C/em> (14 million weekly downloads), were successively compromised to publish malicious versions. The affected versions executed \u003Cstrong>credential-stealing trojans\u003C/strong> similar to the UAParser.js case, at one point causing build pipelines to break for numerous projects globally using frameworks like React (\u003Ca href=\"https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,js\">A Timeline of SSC Attacks, Curated by Sonatype\u003C/a>) (\u003Ca href=\"https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,Is%20Hijacked%2C%20Too\">A Timeline of SSC Attacks, Curated by Sonatype\u003C/a>). Official investigations determined the cause in both cases was compromised maintainer accounts.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>January 2022\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>Colors/Faker Open Source Libraries “Suicide”\u003C/strong>\u003C/td>\u003Ctd>The authors of the famous color formatting library \u003Cem>colors.js\u003C/em> and test data generation library \u003Cem>faker.js\u003C/em>, out of protest, injected destructive code like infinite loops in the latest versions, causing thousands of projects, including those at companies like Meta (Facebook) and Amazon, to crash (\u003Ca href=\"https://www.sonatype.com/resources/vulnerability-timeline#:~:text=Thousands%20of%20open%20source%20projects,companies%20exploiting%20open%20source\">A Timeline of SSC Attacks, Curated by Sonatype\u003C/a>) (While not an external attack, it falls within the scope of supply chain poisoning).\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>January 2022\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>PyPI: 1,275 Malicious Packages Deployed in Bulk\u003C/strong>\u003C/td>\u003Ctd>A single user frantically published \u003Cstrong>1,275 malicious packages\u003C/strong> to PyPI in one day on January 23rd (\u003Ca href=\"https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,Than%201%2C200%20Dependency%20Confusion%20Packages\">A Timeline of SSC Attacks, Curated by Sonatype\u003C/a>). Most of these packages impersonated the names of well-known projects or companies (e.g., \u003Cem>xcryptography\u003C/em>, \u003Cem>Sagepay\u003C/em>, etc.). After installation, they collected fingerprint information like hostname, IP, etc., and exfiltrated it to the attackers via DNS/HTTP (\u003Ca href=\"https://www.sonatype.com/blog/pypi-flooded-with-over-1200-dependency-confusion-packages#:~:text=The%20,of%20these%20components%20are%20installed\">PyPI flooded with 1,275 dependency confusion packages\u003C/a>) (\u003Ca href=\"https://www.sonatype.com/blog/pypi-flooded-with-over-1200-dependency-confusion-packages#:~:text=For%20DNS%3A%20.sub.deliverycontent,online\">PyPI flooded with 1,275 dependency confusion packages\u003C/a>). PyPI administrators took down all related packages within an hour of receiving the report (\u003Ca href=\"https://www.sonatype.com/blog/pypi-flooded-with-over-1200-dependency-confusion-packages#:~:text=All%20of%20the%201%2C275%20were,an%20hour%20of%20our%20report\">PyPI flooded with 1,275 dependency confusion packages\u003C/a>).\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>March 2022\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>Node-ipc “Protestware” Incident\u003C/strong>\u003C/td>\u003Ctd>The author of \u003Cem>node-ipc\u003C/em>, a commonly used front-end build library, added malicious code in versions v10.1.1–10.1.3: when detecting client IPs belonging to Russia or Belarus, it would \u003Cstrong>wipe the file system\u003C/strong> and overwrite files with heart emojis ([Corrupted open-source software enters the Russian battlefield\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>October 2022\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>LofyGang Large-Scale Poisoning Campaign\u003C/strong>\u003C/td>\u003Ctd>Security companies discovered a group named “LofyGang” distributed nearly \u003Cstrong>200 malicious packages\u003C/strong> on NPM (\u003Ca href=\"https://thehackernews.com/2022/10/lofygang-distributed-200-malicious-npm.html#:~:text=Multiple%20campaigns%20that%20distributed%20trojanized,single%20threat%20actor%20dubbed%20LofyGang\">LofyGang Distributed ~200 Malicious NPM Packages to Steal Credit Card Data\u003C/a>). These packages implanted \u003Cstrong>trojans\u003C/strong> through \u003Cstrong>typosquatting\u003C/strong> and by impersonating common library names, stealing developers’ credit card information, Discord accounts, and game service login credentials, accumulating thousands of installations (\u003Ca href=\"https://thehackernews.com/2022/10/lofygang-distributed-200-malicious-npm.html#:~:text=Multiple%20campaigns%20that%20distributed%20trojanized,single%20threat%20actor%20dubbed%20LofyGang\">LofyGang Distributed ~200 Malicious NPM Packages to Steal Credit Card Data\u003C/a>). This was an organized cybercrime activity that lasted over a year.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>December 2022\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>PyTorch-nightly Dependency Chain Attack\u003C/strong>\u003C/td>\u003Ctd>Well-known deep learning framework PyTorch disclosed that its nightly version suffered a \u003Cstrong>dependency confusion\u003C/strong> supply chain attack between December 25-30 ([Malicious PyTorch dependency ‘torchtriton’ on PyPI\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>March 2023\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>”W4SP Stealer” Trojan Rampant on PyPI\u003C/strong>\u003C/td>\u003Ctd>Security researchers successively discovered a large number of malicious packages carrying the \u003Cstrong>W4SP Stealer\u003C/strong> information-stealing trojan appearing on PyPI (\u003Ca href=\"https://thehackernews.com/2022/12/w4sp-stealer-discovered-in-multiple.html#:~:text=Threat%20actors%20have%20published%20yet,malware%20on%20compromised%20developer%20machines\">W4SP Stealer Discovered in Multiple PyPI Packages Under Various Names\u003C/a>). These trojans have many aliases (e.g., ANGEL Stealer, PURE Stealer, etc.) but essentially all belong to the W4SP family, specifically designed to steal information like user passwords, cryptocurrency wallets, and Discord tokens (\u003Ca href=\"https://thehackernews.com/2022/12/w4sp-stealer-discovered-in%20multiple.html#:~:text=Interestingly%2C%20while%20the%20malware%20goes,be%20copies%20of%20W4SP%20Stealer\">W4SP Stealer Discovered in Multiple PyPI Packages Under Various Names\u003C/a>). A single report revealed 16 such malicious packages (e.g., \u003Cem>modulesecurity\u003C/em>, \u003Cem>easycordey\u003C/em>, etc.) (\u003Ca href=\"https://thehackernews.com/2022/12/w4sp-stealer-discovered-in-multiple.html#:~:text=The%2016%20rogue%20modules%20are,nowsys%2C%20upamonkws%2C%20captchaboy%2C%20and%20proxybooster\">W4SP Stealer Discovered in Multiple PyPI Packages Under Various Names\u003C/a>). PyPI initiated a cleanup targeting such trojans and strengthened upload detection.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>August 2023\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>Lazarus Group Attacks PyPI\u003C/strong>\u003C/td>\u003Ctd>ReversingLabs reported that a branch of the North Korean hacking group Lazarus published over two dozen (more than 24) malicious packages disguised as popular libraries on PyPI (codenamed “VMConnect” operation) (\u003Ca href=\"https://www.reversinglabs.com/blog/a-partial-history-of-software-supply-chain-attacks#:~:text=\">Software Supply Chain Attacks: A (partial) History\u003C/a>). These packages attempted to target users in specific industries (e.g., finance) to implant remote access trojans. It is claimed this attack is linked to previous similar activities targeting NuGet, showing state-sponsored hackers’ interest in the open-source supply chain.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>2024 and Beyond\u003C/strong>\u003C/td>\u003Ctd>\u003Cstrong>Ongoing Supply Chain Threats\u003C/strong>\u003C/td>\u003Ctd>Since 2024, new poisoning incidents continue to emerge on NPM and PyPI. For example, in early 2024, fake VS Code-related NPM packages were found to contain remote control spyware (\u003Ca href=\"https://www.sonatype.com/resources/vulnerability-timeline#:~:text=,altered%20ScreenConnect%20utility%20as%20spyware\">A Timeline of SSC Attacks, Curated by Sonatype\u003C/a>), and PyPI packages impersonating Solana libraries to steal crypto wallet keys (\u003Ca href=\"https://www.sonatype.com/resources/vulnerability-timeline#:~:text=%23%23%20%20Ideal%20typosquat%20%27solana,steals%20your%20crypto%20wallet%20keys\">A Timeline of SSC Attacks, Curated by Sonatype\u003C/a>) were discovered. This indicates that supply chain attacks have become a normalized threat, requiring the ecosystem to continuously raise vigilance and defense capabilities.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>I complained a bit on Twitter, and while complaining, I saw a tweet from a friend who had just encountered a supply chain attack incident.\u003C/p>\n\u003Cp>\u003Ca href=\"https://x.com/tcdwww/status/1914202659210359108\">\u003Cimg src=\"https://static.miantiao.me/share/ZUy0MY/twitter.jpeg\" alt=\"Twitter\">\u003C/a>\u003C/p>\n\u003Cp>Fortunately, \u003Ca href=\"https://x.com/TBXark\">@TBXark\u003C/a> recommended his \u003Cstrong>MCP Proxy\u003C/strong> project, which makes it very convenient to run MCP Server in Docker. His initial goal was to run MCP Server on a server to reduce client load and facilitate mobile client calls. However, Docker’s inherent isolation features perfectly aligned with my requirement for a sandbox.\u003C/p>\n\u003Cp>MCP Proxy runs MCP Servers in Docker and converts the protocol to MCP SSE, allowing users to make all calls via the SSE protocol from the MCP client. This can significantly reduce the risk of arbitrary file reading caused by directly running npx and uvx. \u003Cem>If deployed on an overseas server, it can also help solve network issues.\u003C/em>\u003C/p>\n\u003Cp>However, it is currently still possible to read the \u003Ccode>/config/config.json\u003C/code> configuration file of MCP Proxy, but the risk is manageable. I have also raised a feature request with the developer to configure the config file with 400 permissions and run the npx and uvx commands as the nobody user. If this can be implemented, it will perfectly solve the arbitrary file reading issue.\u003C/p>\n\u003Ch2 id=\"running-mcp-proxy\">Running MCP Proxy\u003C/h2>\n\u003Cp>\u003Ca href=\"https://github.com/TBXark/mcp-proxy\">\u003Cimg src=\"https://github.html.zone/TBXark/mcp-proxy\" alt=\"MCP Proxy\">\u003C/a>\u003C/p>\n\u003Cp>If you have your own VPS with Docker deployed, you can use the following command to run MCP Proxy.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>docker run -d -p 9090:9090 -v /path/to/config.json:/config/config.json ghcr.io/tbxark/mcp-proxy:latest\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you don’t have your own VPS, you can use the free container service provided by \u003Ca href=\"https://404.li/claw\">\u003Cstrong>claw.cloud\u003C/strong>\u003C/a> ($5 credit per month, GitHub registration must be older than 180 days).\u003C/p>\n\u003Cp>Since Claw has container size limitations, we need to use the following environment variables to configure the cache directories for npx and uvx to prevent container crashes.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>UV_CACHE_DIR=/cache/uv\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>npm_config_cache=/cache/npm\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Simultaneously mount 10GB of storage under the \u003Ccode>/cache\u003C/code> path. Refer to my configuration: 0.5c CPU, 512M Memory, 10G Disk.\u003C/p>\n\u003Cp>The final configuration is as follows:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/g4KUgP/claw.jpg\" alt=\"Claw\">\u003C/p>\n\u003Ch2 id=\"configuring-mcp-proxy\">Configuring MCP Proxy\u003C/h2>\n\u003Cp>The configuration file needs to be mounted at the \u003Ccode>/config/config.json\u003C/code> path. For the complete configuration, please refer to \u003Ca href=\"https://github.com/TBXark/mcp-proxy?tab=readme-ov-file#configurationonfiguration\">https://github.com/TBXark/mcp-proxy?tab=readme-ov-file#configurationonfiguration\u003C/a>.\u003C/p>\n\u003Cp>Below is my configuration, for your reference.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"mcpProxy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"baseURL\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"https://mcp.miantiao.me\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"addr\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\":9090\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"MCP Proxy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"version\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1.0.0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"options\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">          \"panicIfInvalid\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">          \"logEnabled\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">          \"authTokens\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"miantiao.me\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"github\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">                \"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">                \"@modelcontextprotocol/server-github\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                \"GITHUB_PERSONAL_ACCESS_TOKEN\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"&#x3C;YOUR_TOKEN>\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"fetch\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"uvx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">                \"mcp-server-fetch\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"amap\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            \"url\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"https://mcp.amap.com/sse?key=&#x3C;YOUR_TOKEN>\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"calling-mcp-proxy\">Calling MCP proxy\u003C/h2>\n\u003Cp>Taking \u003Ca href=\"https://404.li/chatwise\">\u003Cstrong>ChatWise\u003C/strong>\u003C/a> calling fetch as an example, just configure the SSE protocol directly.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/mI3zIh/fetch.jpg\" alt=\"fetch\">\u003C/p>\n\u003Cp>Isn’t it simple? When \u003Ca href=\"https://404.li/chatwise\">\u003Cstrong>ChatWise\u003C/strong>\u003C/a> releases its mobile version, calling it this way will also be fully usable.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/t43O9e/chatwise.jpg\" alt=\"ChatWise\">\u003C/p>",{"headings":488,"localImagePaths":498,"remoteImagePaths":499,"frontmatter":500,"imagePaths":501},[489,492,495],{"depth":78,"slug":490,"text":491},"running-mcp-proxy","Running MCP Proxy",{"depth":78,"slug":493,"text":494},"configuring-mcp-proxy","Configuring MCP Proxy",{"depth":78,"slug":496,"text":497},"calling-mcp-proxy","Calling MCP proxy",[],[],{"layout":27,"title":479,"description":480,"dateFormatted":481},[],"guide-to-running-mcp-server-in-a-sandbox.md","cloudflare-web-analytics-kill-adblock",{"id":503,"data":505,"body":508,"filePath":509,"digest":510,"rendered":511,"legacyId":522},{"title":506,"description":506,"dateFormatted":507},"Solving the issue of Cloudflare Web Analytics being blocked by AdBlock","Jan 8th, 2024","Earlier, we solved the issues of [Vercel Analytics](https://dev.to/ccbikai/jie-jue-vercel-analytics-bei-adblock-ping-bi-wen-ti-1o21-temp-slug-5601874) and [Umami](https://dev.to/ccbikai/jie-jue-umami-bei-adblock-ping-bi-wen-ti-3kc2-temp-slug-2355567) being blocked by AdBlock, and now we are also going to solve the problem for [Email.ML](https://email.ml/) which uses [Cloudflare Web Analytics](https://www.cloudflare.com/zh-cn/web-analytics/).\n\nCloudflare Web Analytics is blocked by the `||cloudflareinsights.com^` rule. Its script address is `https://static.cloudflareinsights.com/beacon.min.js`, and the data reporting address is `https://cloudflareinsights.com/cdn-cgi/rum`.\n\n![||cloudflareinsights.com^](https://static.miantiao.me/share/2024/U4WHW7/GtPNhj.png)\n\nSo, just like Umami, we will proxy the script address and forward the data to the data reporting address.\n\n## Solution\n\nCreate a Worker in Cloudflare Workers and paste the following JavaScript code. Configure the domain and test if the script address can be accessed properly. Mine is [https://cwa.miantiao.me/mt-demo.js](https://cwa.miantiao.me/mt-demo.js). The `mt-demo` can be replaced with any disguise address, the script above is already adapted.\n\n```js\nconst CWA_API = 'https://cloudflareinsights.com/cdn-cgi/rum'\nconst CWA_SCRIPT = 'https://static.cloudflareinsights.com/beacon.min.js'\n\nexport default {\n  async fetch(request, env, ctx) {\n    let { pathname, search } = new URL(request.url)\n    if (pathname.endsWith('.js')) {\n      let response = await caches.default.match(request)\n      if (!response) {\n          response = await fetch(CWA_SCRIPT, request)\n          ctx.waitUntil(caches.default.put(request, response.clone()))\n      }\n      return response\n    }\n    const req = new Request(request)\n    req.headers.delete(\"cookie\")\n    const response = await fetch(`${CWA_API}${search}`, req)\n    const headers = Object.fromEntries(response.headers.entries())\n    if (!response.headers.has('Access-Control-Allow-Origin')) {\n      headers['Access-Control-Allow-Origin'] = request.headers.get('Origin') || '*'\n    }\n    if (!response.headers.has('Access-Control-Allow-Headers')) {\n      headers['Access-Control-Allow-Headers'] = 'content-type'\n    }\n    if (!response.headers.has('Access-Control-Allow-Credentials')) {\n      headers['Access-Control-Allow-Credentials'] = 'true'\n    }\n    return new Response(response.body, {\n      status: response.status,\n      headers\n    })\n  },\n};\n\n```\n\nThen inject the script into your website project, referring to my code:\n\n```html\n\u003Cscript async src='https://cwa.miantiao.me/mt-demo.js' data-cf-beacon='{\"send\":{\"to\": \"https://cwa.miantiao.me/mt-demo\"},\"token\": \"5403f4dc926c4e61a757d630b1ec21ad\"}'>\u003C/script>\n\n```\n\n`src` is the script address, replace `mt-demo` with any disguise address. `data-cf-beacon` contains the send to data reporting address, replace `mt-demo` with any disguise address, the script is already adapted. Remember to change the `token` to your site's token.\n\nYou can verify it on [Email.ML](https://email.ml/) or [HTML.ZONE](https://html.zone/).\n\n**Note that using this solution requires disabling automatic configuration, otherwise the data will not be counted.**\n\n![Disable automatic configuration](https://static.miantiao.me/share/2024/AnFeat/jqthrz.png)","src/content/post/cloudflare-web-analytics-kill-adblock.md","6a964d20fc9d06d7",{"html":512,"metadata":513},"\u003Cp>Earlier, we solved the issues of \u003Ca href=\"https://dev.to/ccbikai/jie-jue-vercel-analytics-bei-adblock-ping-bi-wen-ti-1o21-temp-slug-5601874\">Vercel Analytics\u003C/a> and \u003Ca href=\"https://dev.to/ccbikai/jie-jue-umami-bei-adblock-ping-bi-wen-ti-3kc2-temp-slug-2355567\">Umami\u003C/a> being blocked by AdBlock, and now we are also going to solve the problem for \u003Ca href=\"https://email.ml/\">Email.ML\u003C/a> which uses \u003Ca href=\"https://www.cloudflare.com/zh-cn/web-analytics/\">Cloudflare Web Analytics\u003C/a>.\u003C/p>\n\u003Cp>Cloudflare Web Analytics is blocked by the \u003Ccode>||cloudflareinsights.com^\u003C/code> rule. Its script address is \u003Ccode>https://static.cloudflareinsights.com/beacon.min.js\u003C/code>, and the data reporting address is \u003Ccode>https://cloudflareinsights.com/cdn-cgi/rum\u003C/code>.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/2024/U4WHW7/GtPNhj.png\" alt=\"||cloudflareinsights.com^\">\u003C/p>\n\u003Cp>So, just like Umami, we will proxy the script address and forward the data to the data reporting address.\u003C/p>\n\u003Ch2 id=\"solution\">Solution\u003C/h2>\n\u003Cp>Create a Worker in Cloudflare Workers and paste the following JavaScript code. Configure the domain and test if the script address can be accessed properly. Mine is \u003Ca href=\"https://cwa.miantiao.me/mt-demo.js\">https://cwa.miantiao.me/mt-demo.js\u003C/a>. The \u003Ccode>mt-demo\u003C/code> can be replaced with any disguise address, the script above is already adapted.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> CWA_API\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'https://cloudflareinsights.com/cdn-cgi/rum'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> CWA_SCRIPT\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'https://static.cloudflareinsights.com/beacon.min.js'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">env\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ctx\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { pathname, search } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request.url)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (pathname.\u003C/span>\u003Cspan style=\"color:#B392F0\">endsWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> caches.default.\u003C/span>\u003Cspan style=\"color:#B392F0\">match\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">response) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">CWA_SCRIPT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, request)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          ctx.\u003C/span>\u003Cspan style=\"color:#B392F0\">waitUntil\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(caches.default.\u003C/span>\u003Cspan style=\"color:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request, response.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> req\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    req.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">delete\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"cookie\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> response\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#79B8FF\">CWA_API\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">search\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, req)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> headers\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">fromEntries\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(response.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">entries\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">response.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">has\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Access-Control-Allow-Origin'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      headers[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Access-Control-Allow-Origin'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> request.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Origin'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '*'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">response.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">has\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Access-Control-Allow-Headers'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      headers[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Access-Control-Allow-Headers'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'content-type'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">response.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">has\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Access-Control-Allow-Credentials'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      headers[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Access-Control-Allow-Credentials'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'true'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(response.body, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      status: response.status,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      headers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then inject the script into your website project, referring to my code:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#B392F0\"> async\u003C/span>\u003Cspan style=\"color:#B392F0\"> src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://cwa.miantiao.me/mt-demo.js'\u003C/span>\u003Cspan style=\"color:#B392F0\"> data-cf-beacon\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'{\"send\":{\"to\": \"https://cwa.miantiao.me/mt-demo\"},\"token\": \"5403f4dc926c4e61a757d630b1ec21ad\"}'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>src\u003C/code> is the script address, replace \u003Ccode>mt-demo\u003C/code> with any disguise address. \u003Ccode>data-cf-beacon\u003C/code> contains the send to data reporting address, replace \u003Ccode>mt-demo\u003C/code> with any disguise address, the script is already adapted. Remember to change the \u003Ccode>token\u003C/code> to your site’s token.\u003C/p>\n\u003Cp>You can verify it on \u003Ca href=\"https://email.ml/\">Email.ML\u003C/a> or \u003Ca href=\"https://html.zone/\">HTML.ZONE\u003C/a>.\u003C/p>\n\u003Cp>\u003Cstrong>Note that using this solution requires disabling automatic configuration, otherwise the data will not be counted.\u003C/strong>\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/2024/AnFeat/jqthrz.png\" alt=\"Disable automatic configuration\">\u003C/p>",{"headings":514,"localImagePaths":518,"remoteImagePaths":519,"frontmatter":520,"imagePaths":521},[515],{"depth":78,"slug":516,"text":517},"solution","Solution",[],[],{"layout":27,"title":506,"description":506,"dateFormatted":507},[],"cloudflare-web-analytics-kill-adblock.md","umami-kill-adblock",{"id":523,"data":525,"body":528,"filePath":529,"digest":530,"rendered":531,"legacyId":540},{"title":526,"description":526,"dateFormatted":527},"Resolving Umami Blocked by AdBlock Issue","Jan 6, 2024","I recently redesigned my [personal homepage](https://mt.ci/) and used Umami for website analytics. However, there is an ongoing issue: users who have AdBlock installed are causing the analytics to fail.\n\nFor more information on how AdBlock works, you can refer to [Resolving Vercel Analytics Blocked by AdBlock Issue](11). The rule that blocks Umami is `||umami.is^$3p`, which blocks the script and data reporting URLs. To overcome this, we can use [Cloudflare Workers](https://workers.cloudflare.com/) to proxy Umami.\n\n![||umami.is^$3p](https://static.miantiao.me/share/2024/CNrM78/ha30pV.png)\n\n## Solution\n\nCreate a Cloudflare Worker and paste the following JavaScript code. If you are using the official Umami service, you don't need to modify the code (remember to change UMAMI\\_HOST to your service URL). If you are using a self-hosted service, you can define the script and data reporting URLs using the `TRACKER_SCRIPT_NAME` and `COLLECT_API_ENDPOINT` environment variables, without the need for proxying.\n\n```js\nconst UMAMI_HOST = 'https://eu.umami.is'\n\nexport default {\n  async fetch(request, env, ctx) {\n    const { pathname, search } = new URL(request.url)\n    if (pathname.endsWith('.js')) {\n      let response = await caches.default.match(request)\n      if (!response) {\n          response = await fetch(`${UMAMI_HOST}/script.js`, request)\n          ctx.waitUntil(caches.default.put(request, response.clone()))\n      }\n      return response\n    }\n    const req = new Request(request)\n    req.headers.delete(\"cookie\")\n    req.headers.append('x-client-ip', req.headers.get('cf-connecting-ip'))\n    return fetch(`${UMAMI_HOST}${pathname}${search}`, req)\n  },\n};\n\n```\n\nOnce you have created the Worker, configure the domain and test if the script URL can be accessed correctly. In my case, it is [https://ums.miantiao.me/mt-demo.js](https://ums.miantiao.me/mt-demo.js). You can replace \"mt-demo\" with any disguised URL, as the script has already been adapted.\n\nNext, inject the script into your website project. You can refer to the official documentation at [https://umami.is/docs/tracker-configuration](https://umami.is/docs/tracker-configuration) or use the following code as a reference:\n\n```html\n\u003Cscript defer src=\"https://ums.miantiao.me/mt-demo.js\" data-host-url=\"https://ums.miantiao.me\" data-website-id=\"0a10de75-03be-4fec-a521-4c62b91650ac\">\u003C/script>\n\n```\n\nIn the above code, `src` refers to the script URL, `data-host-url` refers to the data reporting URL, and `data-website-id` refers to the website ID. Make sure to provide the correct website ID to ensure data reporting.\n\nYou can verify the implementation on [Noodle Lab](https://mt.ci/) or this website.","src/content/post/umami-kill-adblock.md","dbdcad1a8128907c",{"html":532,"metadata":533},"\u003Cp>I recently redesigned my \u003Ca href=\"https://mt.ci/\">personal homepage\u003C/a> and used Umami for website analytics. However, there is an ongoing issue: users who have AdBlock installed are causing the analytics to fail.\u003C/p>\n\u003Cp>For more information on how AdBlock works, you can refer to \u003Ca href=\"11\">Resolving Vercel Analytics Blocked by AdBlock Issue\u003C/a>. The rule that blocks Umami is \u003Ccode>||umami.is^$3p\u003C/code>, which blocks the script and data reporting URLs. To overcome this, we can use \u003Ca href=\"https://workers.cloudflare.com/\">Cloudflare Workers\u003C/a> to proxy Umami.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/2024/CNrM78/ha30pV.png\" alt=\"||umami.is^$3p\">\u003C/p>\n\u003Ch2 id=\"solution\">Solution\u003C/h2>\n\u003Cp>Create a Cloudflare Worker and paste the following JavaScript code. If you are using the official Umami service, you don’t need to modify the code (remember to change UMAMI_HOST to your service URL). If you are using a self-hosted service, you can define the script and data reporting URLs using the \u003Ccode>TRACKER_SCRIPT_NAME\u003C/code> and \u003Ccode>COLLECT_API_ENDPOINT\u003C/code> environment variables, without the need for proxying.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> UMAMI_HOST\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'https://eu.umami.is'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">env\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">ctx\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">pathname\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">search\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request.url)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (pathname.\u003C/span>\u003Cspan style=\"color:#B392F0\">endsWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> caches.default.\u003C/span>\u003Cspan style=\"color:#B392F0\">match\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">response) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#79B8FF\">UMAMI_HOST\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}/script.js`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, request)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          ctx.\u003C/span>\u003Cspan style=\"color:#B392F0\">waitUntil\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(caches.default.\u003C/span>\u003Cspan style=\"color:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request, response.\u003C/span>\u003Cspan style=\"color:#B392F0\">clone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> req\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    req.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">delete\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"cookie\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    req.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'x-client-ip'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, req.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'cf-connecting-ip'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#79B8FF\">UMAMI_HOST\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">pathname\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">search\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, req)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Once you have created the Worker, configure the domain and test if the script URL can be accessed correctly. In my case, it is \u003Ca href=\"https://ums.miantiao.me/mt-demo.js\">https://ums.miantiao.me/mt-demo.js\u003C/a>. You can replace “mt-demo” with any disguised URL, as the script has already been adapted.\u003C/p>\n\u003Cp>Next, inject the script into your website project. You can refer to the official documentation at \u003Ca href=\"https://umami.is/docs/tracker-configuration\">https://umami.is/docs/tracker-configuration\u003C/a> or use the following code as a reference:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#B392F0\"> defer\u003C/span>\u003Cspan style=\"color:#B392F0\"> src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"https://ums.miantiao.me/mt-demo.js\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> data-host-url\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"https://ums.miantiao.me\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> data-website-id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0a10de75-03be-4fec-a521-4c62b91650ac\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In the above code, \u003Ccode>src\u003C/code> refers to the script URL, \u003Ccode>data-host-url\u003C/code> refers to the data reporting URL, and \u003Ccode>data-website-id\u003C/code> refers to the website ID. Make sure to provide the correct website ID to ensure data reporting.\u003C/p>\n\u003Cp>You can verify the implementation on \u003Ca href=\"https://mt.ci/\">Noodle Lab\u003C/a> or this website.\u003C/p>",{"headings":534,"localImagePaths":536,"remoteImagePaths":537,"frontmatter":538,"imagePaths":539},[535],{"depth":78,"slug":516,"text":517},[],[],{"layout":27,"title":526,"description":526,"dateFormatted":527},[],"umami-kill-adblock.md","vercel-kill-adblock",{"id":541,"data":543,"body":545,"filePath":546,"digest":547,"rendered":548,"legacyId":557},{"title":544,"description":544,"dateFormatted":16},"Solving Vercel Analytics Blocked by AdBlock Issue","[DNS.Surf](https://dns.surf/) runs 100% on Vercel, so Vercel Analytics is used for access statistics. However, many users who have AdBlock installed experience issues with access statistics not being recorded. Today, we will solve the problem of AdBlock blocking access statistics, while still relying on Vercel 100%.\n\nThe core principle of AdBlock is to block certain network requests and page elements using rules. Vercel Analytics is blocked by the rule `/_vercel/insights/script.js`, and it may also block `/_vercel/insights/event`. To solve this problem, we just need to make these two URLs less recognizable.\n\n![/_vercel/insights/script.js](https://static.miantiao.me/share/2024/JbSVLo/5aOZdV.png)\n\n## Solution\n\nVercel comes with a Rewrite feature, so we just need to rewrite the disguised path `/mt-demo` to `/_vercel/insights`. The disguised path can be any unique path that does not conflict with existing paths. If it gets blocked, just use a different one. The vercel.json configuration is as follows:\n\n```js\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/mt-demo/:match*\",\n      \"destination\": \"https://dns.surf/_vercel/insights/:match*\"\n    }\n  ]\n}\n```\n\nNote that the destination should be the complete URL, otherwise it will not work.\n\nIn the official tutorial, different frameworks use [@vercel/analytics](https://vercel.com/docs/analytics/package) to inject the analytics script into the page, but it does not support custom scripts and data reporting URLs. Therefore, we need to use the HTML method to inject the script.\n\n```html\n\u003Cscript>\n  window.va = window.va || function () { (window.vaq = window.vaq || []).push(arguments); };\n\u003C/script>\n\u003Cscript async src=\"/mt-demo/script.js\" data-endpoint=\"/mt-demo\">\u003C/script>\n```\n\n`src` is the script URL, and `data-endpoint` is the data reporting URL. Although it is not mentioned in the official documentation, the script does support it. Remember to replace `mt-demo` with your disguised path.\n\nIf you are using a different framework, you can look for the method to inject scripts in that framework to adapt it to your own usage.\n\nYou can verify the effect using [DNS.Surf](https://dns.surf/).","src/content/post/vercel-kill-adblock.md","7adbf3dba756b339",{"html":549,"metadata":550},"\u003Cp>\u003Ca href=\"https://dns.surf/\">DNS.Surf\u003C/a> runs 100% on Vercel, so Vercel Analytics is used for access statistics. However, many users who have AdBlock installed experience issues with access statistics not being recorded. Today, we will solve the problem of AdBlock blocking access statistics, while still relying on Vercel 100%.\u003C/p>\n\u003Cp>The core principle of AdBlock is to block certain network requests and page elements using rules. Vercel Analytics is blocked by the rule \u003Ccode>/_vercel/insights/script.js\u003C/code>, and it may also block \u003Ccode>/_vercel/insights/event\u003C/code>. To solve this problem, we just need to make these two URLs less recognizable.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://static.miantiao.me/share/2024/JbSVLo/5aOZdV.png\" alt=\"/_vercel/insights/script.js\">\u003C/p>\n\u003Ch2 id=\"solution\">Solution\u003C/h2>\n\u003Cp>Vercel comes with a Rewrite feature, so we just need to rewrite the disguised path \u003Ccode>/mt-demo\u003C/code> to \u003Ccode>/_vercel/insights\u003C/code>. The disguised path can be any unique path that does not conflict with existing paths. If it gets blocked, just use a different one. The vercel.json configuration is as follows:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"rewrites\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"source\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/mt-demo/:match*\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"destination\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"https://dns.surf/_vercel/insights/:match*\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Note that the destination should be the complete URL, otherwise it will not work.\u003C/p>\n\u003Cp>In the official tutorial, different frameworks use \u003Ca href=\"https://vercel.com/docs/analytics/package\">@vercel/analytics\u003C/a> to inject the analytics script into the page, but it does not support custom scripts and data reporting URLs. Therefore, we need to use the HTML method to inject the script.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  window.va \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.va \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () { (window.vaq \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.vaq \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> []).\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">arguments\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#B392F0\"> async\u003C/span>\u003Cspan style=\"color:#B392F0\"> src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/mt-demo/script.js\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> data-endpoint\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/mt-demo\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>src\u003C/code> is the script URL, and \u003Ccode>data-endpoint\u003C/code> is the data reporting URL. Although it is not mentioned in the official documentation, the script does support it. Remember to replace \u003Ccode>mt-demo\u003C/code> with your disguised path.\u003C/p>\n\u003Cp>If you are using a different framework, you can look for the method to inject scripts in that framework to adapt it to your own usage.\u003C/p>\n\u003Cp>You can verify the effect using \u003Ca href=\"https://dns.surf/\">DNS.Surf\u003C/a>.\u003C/p>",{"headings":551,"localImagePaths":553,"remoteImagePaths":554,"frontmatter":555,"imagePaths":556},[552],{"depth":78,"slug":516,"text":517},[],[],{"layout":27,"title":544,"description":544,"dateFormatted":16},[],"vercel-kill-adblock.md","minimal-docker-image-for-vite",{"id":558,"data":560,"body":563,"filePath":564,"digest":565,"rendered":566,"legacyId":583},{"title":561,"description":561,"dateFormatted":562},"Minimal Docker Image Packaging for Vite SSR Projects","Sep 1, 2024","Recently, I've been preparing to migrate projects hosted on Cloudflare, Vercel, and Netlify to my own VPS to run via Docker. I revisited Docker image packaging. However, even a small project ended up being packaged into a 1.05GB image, which is clearly unacceptable. So, I researched minimal Docker image packaging for Node.js projects, reducing the image size from 1.06GB to 135MB.\n\nThe example project is an Astro project using Vite as the build tool, running in SSR mode.\n\n## Version 0\n\n> The main idea is to use a minimal system image, opting for the Alpine Linux image.\n\nFollowing the [Astro official documentation for Server-Side Rendering (SSR)](https://docs.astro.build/en/recipes/docker/#ssr), I replaced the base image with node:lts-alpine, and switched from NPM to PNPM. The resulting image size was 1.06GB, which is the worst-case scenario.\n\n```dockerfile\nFROM node:lts-alpine AS base\n\nENV PNPM_HOME=\"/pnpm\"\nENV PATH=\"$PNPM_HOME:$PATH\"\nRUN corepack enable\n\nWORKDIR /app\n\nCOPY . .\nRUN pnpm install --frozen-lockfile\nRUN export $(cat .env.example) && pnpm run build\n\nENV HOST=0.0.0.0\nENV PORT=4321\nEXPOSE 4321\nCMD node ./dist/server/entry.mjs\n```\n\n```log\ndocker build -t v0 .\n[+] Building 113.8s (11/11) FINISHED                                                                                                                                        docker:orbstack\n => [internal] load build definition from Dockerfile                                                                                                                                   0.0s\n => => transferring dockerfile: 346B                                                                                                                                                   0.0s\n => [internal] load metadata for docker.io/library/node:lts-alpine                                                                                                                     1.1s\n => [internal] load .dockerignore                                                                                                                                                      0.0s\n => => transferring context: 89B                                                                                                                                                       0.0s\n => [1/6] FROM docker.io/library/node:lts-alpine@sha256:1a526b97cace6b4006256570efa1a29cd1fe4b96a5301f8d48e87c5139438a45                                                               0.0s\n => [internal] load build context                                                                                                                                                      0.2s\n => => transferring context: 240.11kB                                                                                                                                                  0.2s\n => CACHED [2/6] RUN corepack enable                                                                                                                                                   0.0s\n => CACHED [3/6] WORKDIR /app                                                                                                                                                          0.0s\n => [4/6] COPY . .                                                                                                                                                                     2.0s\n => [5/6] RUN pnpm install --frozen-lockfile                                                                                                                                          85.7s\n => [6/6] RUN export $(cat .env.example) && pnpm run build                                                                                                      11.1s\n => exporting to image                                                                                                                                                                13.4s\n => => exporting layers                                                                                                                                                               13.4s\n => => writing image sha256:653236defcbb8d99d83dc550f1deb55e48b49d7925a295049806ebac8c104d4a                                                                                           0.0s\n => => naming to docker.io/library/v0\n```\n\n## Version 1\n\n> The main idea is to first install production dependencies, creating the first layer. Then install all dependencies, package to generate JavaScript artifacts, creating the second layer. Finally, copy the production dependencies and JavaScript artifacts to the runtime environment.\n\nFollowing the [multi-stage build (using SSR)](https://docs.astro.build/en/recipes/docker/#multi-stage-build-using-ssr) approach, I reduced the image size to 306MB. This is a significant reduction, but the drawback is that **it requires explicitly specifying production dependencies; if any are missed, runtime errors will occur**.\n\n```dockerfile\nFROM node:lts-alpine AS base\n\nENV PNPM_HOME=\"/pnpm\"\nENV PATH=\"$PNPM_HOME:$PATH\"\nRUN corepack enable\n\nWORKDIR /app\nCOPY package.json pnpm-lock.yaml ./\n\nFROM base AS prod-deps\nRUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile\n\nFROM base AS build-deps\nRUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile\n\nFROM build-deps AS build\nCOPY . .\nRUN export $(cat .env.example) && pnpm run build\n\nFROM base AS runtime\nCOPY --from=prod-deps /app/node_modules ./node_modules\nCOPY --from=build /app/dist ./dist\n\nENV HOST=0.0.0.0\nENV PORT=4321\nEXPOSE 4321\nCMD node ./dist/server/entry.mjs\n```\n\n```log\ndocker build -t v1 .\n[+] Building 85.5s (15/15) FINISHED                                                                                                                                         docker:orbstack\n => [internal] load build definition from Dockerfile                                                                                                                                   0.1s\n => => transferring dockerfile: 680B                                                                                                                                                   0.0s\n => [internal] load metadata for docker.io/library/node:lts-alpine                                                                                                                     1.8s\n => [internal] load .dockerignore                                                                                                                                                      0.0s\n => => transferring context: 89B                                                                                                                                                       0.0s\n => [base 1/4] FROM docker.io/library/node:lts-alpine@sha256:1a526b97cace6b4006256570efa1a29cd1fe4b96a5301f8d48e87c5139438a45                                                          0.0s\n => [internal] load build context                                                                                                                                                      0.3s\n => => transferring context: 240.44kB                                                                                                                                                  0.2s\n => CACHED [base 2/4] RUN corepack enable                                                                                                                                              0.0s\n => CACHED [base 3/4] WORKDIR /app                                                                                                                                                     0.0s\n => [base 4/4] COPY package.json pnpm-lock.yaml ./                                                                                                                                     0.2s\n => [prod-deps 1/1] RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile                                                                           35.1s\n => [build-deps 1/1] RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile                                                                                 65.5s\n => [runtime 1/2] COPY --from=prod-deps /app/node_modules ./node_modules                                                                                                               5.9s\n => [build 1/2] COPY . .                                                                                                                                                               0.8s\n => [build 2/2] RUN export $(cat .env.example) && pnpm run build                                                                                                                       7.5s\n => [runtime 2/2] COPY --from=build /app/dist ./dist                                                                                                                                   0.1s\n => exporting to image                                                                                                                                                                 4.2s\n => => exporting layers                                                                                                                                                                4.1s\n => => writing image sha256:8ae6b2bddf0a7ac5f8ad45e6abb7d36a633e384cf476e45fb9132bdf70ed0c5f                                                                                           0.0s\n => => naming to docker.io/library/v1\n```\n\n## Version 2\n\n> The main idea is to inline node_modules into the JavaScript files, ultimately copying only the JavaScript files to the runtime environment.\n\nWhen I looked into Next.js, I remembered that node_modules could be inlined into JavaScript files, eliminating the need for node_modules. So, I researched and found that Vite SSR also supports this. Therefore, I decided to use the inlining method in the Docker environment, avoiding the need to copy node_modules, and only copying the final dist artifacts, reducing the image size to 135MB.\n\nChanges to the packaging script:\n\n```js\nvite: {\n  ssr: {\n    noExternal: process.env.DOCKER ? !!process.env.DOCKER : undefined;\n  }\n}\n```\n\n**The final Dockerfile is as follows**:\n\n```dockerfile\nFROM node:lts-alpine AS base\n\nENV PNPM_HOME=\"/pnpm\"\nENV PATH=\"$PNPM_HOME:$PATH\"\nRUN corepack enable\n\nWORKDIR /app\nCOPY package.json pnpm-lock.yaml ./\n\n# FROM base AS prod-deps\n# RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile\n\nFROM base AS build-deps\nRUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile\n\nFROM build-deps AS build\nCOPY . .\nRUN export $(cat .env.example) && export DOCKER=true && pnpm run build\n\nFROM base AS runtime\n# COPY --from=prod-deps /app/node_modules ./node_modules\nCOPY --from=build /app/dist ./dist\n\nENV HOST=0.0.0.0\nENV PORT=4321\nEXPOSE 4321\nCMD node ./dist/server/entry.mjs\n```\n\n```log\n docker build -t v2 .\n[+] Building 24.9s (13/13) FINISHED                                                                                                                                         docker:orbstack\n => [internal] load build definition from Dockerfile                                                                                                                                   0.0s\n => => transferring dockerfile: 708B                                                                                                                                                   0.0s\n => [internal] load metadata for docker.io/library/node:lts-alpine                                                                                                                     1.7s\n => [internal] load .dockerignore                                                                                                                                                      0.0s\n => => transferring context: 89B                                                                                                                                                       0.0s\n => [base 1/4] FROM docker.io/library/node:lts-alpine@sha256:1a526b97cace6b4006256570efa1a29cd1fe4b96a5301f8d48e87c5139438a45                                                          0.0s\n => [internal] load build context                                                                                                                                                      0.3s\n => => transferring context: 240.47kB                                                                                                                                                  0.2s\n => CACHED [base 2/4] RUN corepack enable                                                                                                                                              0.0s\n => CACHED [base 3/4] WORKDIR /app                                                                                                                                                     0.0s\n => CACHED [base 4/4] COPY package.json pnpm-lock.yaml ./                                                                                                                              0.0s\n => CACHED [build-deps 1/1] RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile                                                                           0.0s\n => [build 1/2] COPY . .                                                                                                                                                               1.5s\n => [build 2/2] RUN export $(cat .env.example) && export DOCKER=true && pnpm run build                                                                                                15.0s\n => [runtime 1/1] COPY --from=build /app/dist ./dist                                                                                                                                   0.1s\n => exporting to image                                                                                                                                                                 0.1s\n => => exporting layers                                                                                                                                                                0.1s\n => => writing image sha256:0ed5c10162d1faf4208f5ea999fbcd133374acc0e682404c8b05220b38fd1eaf                                                                                           0.0s\n => => naming to docker.io/library/v2\n```\n\nIn the end, the size was reduced from 1.06GB to 135MB, and the build time was reduced from 113.8s to 24.9s.\n\n```log\ndocker images\nREPOSITORY                         TAG         IMAGE ID       CREATED          SIZE\nv2                                 latest      0ed5c10162d1   5 minutes ago    135MB\nv1                                 latest      8ae6b2bddf0a   6 minutes ago    306MB\nv0                                 latest      653236defcbb   11 minutes ago   1.06GB\n```\n\nThe example project is open-source and can be viewed on [GitHub](https://github.com/ccbikai/BroadcastChannel/pkgs/container/broadcastchannel).\n\n[![BroadcastChannel](https://github.html.zone/ccbikai/BroadcastChannel)](https://github.com/ccbikai/BroadcastChannel)","src/content/post/minimal-docker-image-for-vite.md","829656b2b4f79ebd",{"html":567,"metadata":568},"\u003Cp>Recently, I’ve been preparing to migrate projects hosted on Cloudflare, Vercel, and Netlify to my own VPS to run via Docker. I revisited Docker image packaging. However, even a small project ended up being packaged into a 1.05GB image, which is clearly unacceptable. So, I researched minimal Docker image packaging for Node.js projects, reducing the image size from 1.06GB to 135MB.\u003C/p>\n\u003Cp>The example project is an Astro project using Vite as the build tool, running in SSR mode.\u003C/p>\n\u003Ch2 id=\"version-0\">Version 0\u003C/h2>\n\u003Cblockquote>\n\u003Cp>The main idea is to use a minimal system image, opting for the Alpine Linux image.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Following the \u003Ca href=\"https://docs.astro.build/en/recipes/docker/#ssr\">Astro official documentation for Server-Side Rendering (SSR)\u003C/a>, I replaced the base image with node:lts-alpine, and switched from NPM to PNPM. The resulting image size was 1.06GB, which is the worst-case scenario.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dockerfile\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node:lts-alpine \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PNPM_HOME=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/pnpm\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PATH=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"$PNPM_HOME:$PATH\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> corepack enable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WORKDIR\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> . .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pnpm install --frozen-lockfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> export $(cat .env.example) &#x26;&#x26; pnpm run build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> HOST=0.0.0.0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PORT=4321\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">EXPOSE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> 4321\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CMD\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node ./dist/server/entry.mjs\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"log\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">docker build -t v0 .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[+] Building \u003C/span>\u003Cspan style=\"color:#79B8FF\">113\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.8s (\u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) FINISHED                                                                                                                                        docker:orbstack\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load build definition from Dockerfile                                                                                                                                   \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => transferring dockerfile: 346B                                                                                                                                                   \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load metadata for docker.io/library/node:lts-alpine                                                                                                                     \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.1s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load .dockerignore                                                                                                                                                      \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => transferring context: 89B                                                                                                                                                       \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] FROM docker.io/library/node:lts-alpine@sha256:1a526b97cace6b4006256570efa1a29cd1fe4b96a5301f8d48e87c5139438a45                                                               \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load build context                                                                                                                                                      \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.2s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => transferring context: \u003C/span>\u003Cspan style=\"color:#79B8FF\">240\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.11kB                                                                                                                                                  \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.2s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => CACHED [\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN corepack enable                                                                                                                                                   \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => CACHED [\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] WORKDIR /app                                                                                                                                                          \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] COPY . .                                                                                                                                                                     \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN pnpm install --frozen-lockfile                                                                                                                                          \u003C/span>\u003Cspan style=\"color:#79B8FF\">85\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.7s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN export $(cat .\u003C/span>\u003Cspan style=\"color:#79B8FF\">env.example\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) &#x26;&#x26; pnpm run build                                                                                                      \u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.1s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => exporting to image                                                                                                                                                                \u003C/span>\u003Cspan style=\"color:#79B8FF\">13\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.4s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => exporting layers                                                                                                                                                               \u003C/span>\u003Cspan style=\"color:#79B8FF\">13\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.4s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => writing image sha256:653236defcbb8d99d83dc550f1deb55e48b49d7925a295049806ebac8c104d4a                                                                                           \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => naming to docker.io/library/v0\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"version-1\">Version 1\u003C/h2>\n\u003Cblockquote>\n\u003Cp>The main idea is to first install production dependencies, creating the first layer. Then install all dependencies, package to generate JavaScript artifacts, creating the second layer. Finally, copy the production dependencies and JavaScript artifacts to the runtime environment.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Following the \u003Ca href=\"https://docs.astro.build/en/recipes/docker/#multi-stage-build-using-ssr\">multi-stage build (using SSR)\u003C/a> approach, I reduced the image size to 306MB. This is a significant reduction, but the drawback is that \u003Cstrong>it requires explicitly specifying production dependencies; if any are missed, runtime errors will occur\u003C/strong>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dockerfile\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node:lts-alpine \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PNPM_HOME=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/pnpm\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PATH=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"$PNPM_HOME:$PATH\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> corepack enable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WORKDIR\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> package.json pnpm-lock.yaml ./\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> prod-deps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build-deps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build-deps \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> . .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> export $(cat .env.example) &#x26;&#x26; pnpm run build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> runtime\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --from=prod-deps /app/node_modules ./node_modules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --from=build /app/dist ./dist\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> HOST=0.0.0.0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PORT=4321\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">EXPOSE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> 4321\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CMD\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node ./dist/server/entry.mjs\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"log\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">docker build -t v1 .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[+] Building \u003C/span>\u003Cspan style=\"color:#79B8FF\">85\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.5s (\u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) FINISHED                                                                                                                                         docker:orbstack\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load build definition from Dockerfile                                                                                                                                   \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.1s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => transferring dockerfile: 680B                                                                                                                                                   \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load metadata for docker.io/library/node:lts-alpine                                                                                                                     \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.8s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load .dockerignore                                                                                                                                                      \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => transferring context: 89B                                                                                                                                                       \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [base \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] FROM docker.io/library/node:lts-alpine@sha256:1a526b97cace6b4006256570efa1a29cd1fe4b96a5301f8d48e87c5139438a45                                                          \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load build context                                                                                                                                                      \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.3s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => transferring context: \u003C/span>\u003Cspan style=\"color:#79B8FF\">240\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.44kB                                                                                                                                                  \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.2s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => CACHED [base \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN corepack enable                                                                                                                                              \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => CACHED [base \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] WORKDIR /app                                                                                                                                                     \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [base \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] COPY \u003C/span>\u003Cspan style=\"color:#79B8FF\">package.json\u003C/span>\u003Cspan style=\"color:#79B8FF\"> pnpm-lock.yaml\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ./                                                                                                                                     \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.2s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [prod-deps \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile                                                                           \u003C/span>\u003Cspan style=\"color:#79B8FF\">35\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.1s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [build-deps \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile                                                                                 \u003C/span>\u003Cspan style=\"color:#79B8FF\">65\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.5s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [runtime \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] COPY --from=prod-deps /app/node_modules ./node_modules                                                                                                               \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.9s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [build \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] COPY . .                                                                                                                                                               \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.8s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [build \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN export $(cat .\u003C/span>\u003Cspan style=\"color:#79B8FF\">env.example\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) &#x26;&#x26; pnpm run build                                                                                                                       \u003C/span>\u003Cspan style=\"color:#79B8FF\">7\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.5s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [runtime \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] COPY --from=build /app/dist ./dist                                                                                                                                   \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.1s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => exporting to image                                                                                                                                                                 \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.2s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => exporting layers                                                                                                                                                                \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.1s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => writing image sha256:8ae6b2bddf0a7ac5f8ad45e6abb7d36a633e384cf476e45fb9132bdf70ed0c5f                                                                                           \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => naming to docker.io/library/v1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"version-2\">Version 2\u003C/h2>\n\u003Cblockquote>\n\u003Cp>The main idea is to inline node_modules into the JavaScript files, ultimately copying only the JavaScript files to the runtime environment.\u003C/p>\n\u003C/blockquote>\n\u003Cp>When I looked into Next.js, I remembered that node_modules could be inlined into JavaScript files, eliminating the need for node_modules. So, I researched and found that Vite SSR also supports this. Therefore, I decided to use the inlining method in the Docker environment, avoiding the need to copy node_modules, and only copying the final dist artifacts, reducing the image size to 135MB.\u003C/p>\n\u003Cp>Changes to the packaging script:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">vite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  ssr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    noExternal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">DOCKER\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#F97583\"> !!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">DOCKER\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>The final Dockerfile is as follows\u003C/strong>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dockerfile\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node:lts-alpine \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PNPM_HOME=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/pnpm\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PATH=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"$PNPM_HOME:$PATH\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> corepack enable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WORKDIR\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> package.json pnpm-lock.yaml ./\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># FROM base AS prod-deps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build-deps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build-deps \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> . .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> export $(cat .env.example) &#x26;&#x26; export DOCKER=true &#x26;&#x26; pnpm run build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> runtime\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># COPY --from=prod-deps /app/node_modules ./node_modules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --from=build /app/dist ./dist\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> HOST=0.0.0.0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PORT=4321\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">EXPOSE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> 4321\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CMD\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node ./dist/server/entry.mjs\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"log\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> docker build -t v2 .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[+] Building \u003C/span>\u003Cspan style=\"color:#79B8FF\">24\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.9s (\u003C/span>\u003Cspan style=\"color:#79B8FF\">13\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">13\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) FINISHED                                                                                                                                         docker:orbstack\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load build definition from Dockerfile                                                                                                                                   \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => transferring dockerfile: 708B                                                                                                                                                   \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load metadata for docker.io/library/node:lts-alpine                                                                                                                     \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.7s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load .dockerignore                                                                                                                                                      \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => transferring context: 89B                                                                                                                                                       \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [base \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] FROM docker.io/library/node:lts-alpine@sha256:1a526b97cace6b4006256570efa1a29cd1fe4b96a5301f8d48e87c5139438a45                                                          \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [internal] load build context                                                                                                                                                      \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.3s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => transferring context: \u003C/span>\u003Cspan style=\"color:#79B8FF\">240\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.47kB                                                                                                                                                  \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.2s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => CACHED [base \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN corepack enable                                                                                                                                              \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => CACHED [base \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] WORKDIR /app                                                                                                                                                     \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => CACHED [base \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] COPY \u003C/span>\u003Cspan style=\"color:#79B8FF\">package.json\u003C/span>\u003Cspan style=\"color:#79B8FF\"> pnpm-lock.yaml\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ./                                                                                                                              \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => CACHED [build-deps \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile                                                                           \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [build \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] COPY . .                                                                                                                                                               \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.5s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [build \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] RUN export $(cat .\u003C/span>\u003Cspan style=\"color:#79B8FF\">env.example\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) &#x26;&#x26; export DOCKER=\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; pnpm run build                                                                                                \u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => [runtime \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] COPY --from=build /app/dist ./dist                                                                                                                                   \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.1s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => exporting to image                                                                                                                                                                 \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.1s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => exporting layers                                                                                                                                                                \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.1s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => writing image sha256:0ed5c10162d1faf4208f5ea999fbcd133374acc0e682404c8b05220b38fd1eaf                                                                                           \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.0s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\"> => => naming to docker.io/library/v2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In the end, the size was reduced from 1.06GB to 135MB, and the build time was reduced from 113.8s to 24.9s.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"log\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">docker images\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">REPOSITORY                         TAG         IMAGE ID       CREATED          SIZE\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">v2                                 latest      0ed5c10162d1   \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> minutes ago    135MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">v1                                 latest      8ae6b2bddf0a   \u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> minutes ago    306MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">v0                                 latest      653236defcbb   \u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> minutes ago   \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.06GB\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The example project is open-source and can be viewed on \u003Ca href=\"https://github.com/ccbikai/BroadcastChannel/pkgs/container/broadcastchannel\">GitHub\u003C/a>.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ccbikai/BroadcastChannel\">\u003Cimg src=\"https://github.html.zone/ccbikai/BroadcastChannel\" alt=\"BroadcastChannel\">\u003C/a>\u003C/p>",{"headings":569,"localImagePaths":579,"remoteImagePaths":580,"frontmatter":581,"imagePaths":582},[570,573,576],{"depth":78,"slug":571,"text":572},"version-0","Version 0",{"depth":78,"slug":574,"text":575},"version-1","Version 1",{"depth":78,"slug":577,"text":578},"version-2","Version 2",[],[],{"layout":27,"title":561,"description":561,"dateFormatted":562},[],"minimal-docker-image-for-vite.md"]